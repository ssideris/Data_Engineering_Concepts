2023-06-11 23:55:38,884 - kedro.ipython - INFO - Kedro project kedro-tutorial
2023-06-11 23:55:38,887 - kedro.ipython - INFO - Defined global variable 'context', 'session', 'catalog' and 'pipelines'
2023-06-11 23:55:39,622 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\envs\kedro-tutorial\lib\site-packages\strawberry\types\fields\resolver.py:199: DeprecationWarning: Argument name-based matching of 'info' is deprecated and will be removed in v1.0. Ensure that reserved arguments are annotated their respective types (i.e. use value: 'DirectiveValue[str]' instead of 'value: str' and 'info: Info' instead of a plain 'info').
  return {spec: spec.find(parameters, self) for spec in self.RESERVED_PARAMSPEC}

2023-06-11 23:55:39,929 - kedro.ipython - INFO - Registered line magic 'run_viz'
2023-06-11 23:55:39,943 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\envs\kedro-tutorial\lib\site-packages\prompt_toolkit\application\application.py:955: DeprecationWarning: There is no current event loop
  loop = asyncio.get_event_loop()

2023-06-11 23:57:44,271 - kedro.io.data_catalog - INFO - Loading data from 'houses' (CSVDataSet)...
2023-06-11 23:57:44,331 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\envs\kedro-tutorial\lib\site-packages\prompt_toolkit\application\application.py:955: DeprecationWarning: There is no current event loop
  loop = asyncio.get_event_loop()

2023-06-12 00:08:12,706 - kedro.io.data_catalog - INFO - Loading data from 'houses' (CSVDataSet)...
2023-06-12 00:08:12,744 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\envs\kedro-tutorial\lib\site-packages\prompt_toolkit\application\application.py:955: DeprecationWarning: There is no current event loop
  loop = asyncio.get_event_loop()

2023-06-12 13:44:44,334 - kedro.ipython - INFO - Kedro project kedro-tutorial
2023-06-12 13:44:44,339 - kedro.ipython - INFO - Defined global variable 'context', 'session', 'catalog' and 'pipelines'
2023-06-12 13:44:47,476 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\envs\kedro-tutorial\lib\site-packages\strawberry\types\fields\resolver.py:199: DeprecationWarning: Argument name-based matching of 'info' is deprecated and will be removed in v1.0. Ensure that reserved arguments are annotated their respective types (i.e. use value: 'DirectiveValue[str]' instead of 'value: str' and 'info: Info' instead of a plain 'info').
  return {spec: spec.find(parameters, self) for spec in self.RESERVED_PARAMSPEC}

2023-06-12 13:44:48,126 - kedro.ipython - INFO - Registered line magic 'run_viz'
2023-06-12 13:44:48,137 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\envs\kedro-tutorial\lib\site-packages\tornado\ioloop.py:262: DeprecationWarning: There is no current event loop
  loop = asyncio.get_event_loop()

2023-06-12 17:23:01,341 - kedro.ipython - INFO - Kedro project kedro-tutorial
2023-06-12 17:23:01,345 - kedro.ipython - INFO - Defined global variable 'context', 'session', 'catalog' and 'pipelines'
2023-06-12 17:23:02,001 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\envs\kedro-tutorial\lib\site-packages\strawberry\types\fields\resolver.py:199: DeprecationWarning: Argument name-based matching of 'info' is deprecated and will be removed in v1.0. Ensure that reserved arguments are annotated their respective types (i.e. use value: 'DirectiveValue[str]' instead of 'value: str' and 'info: Info' instead of a plain 'info').
  return {spec: spec.find(parameters, self) for spec in self.RESERVED_PARAMSPEC}

2023-06-12 17:23:02,304 - kedro.ipython - INFO - Registered line magic 'run_viz'
2023-06-12 17:23:02,311 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\envs\kedro-tutorial\lib\site-packages\tornado\ioloop.py:262: DeprecationWarning: There is no current event loop
  loop = asyncio.get_event_loop()

2023-06-12 17:24:37,123 - kedro.io.data_catalog - INFO - Loading data from 'houses' (CSVDataSet)...
2023-06-12 17:25:53,016 - kedro.io.data_catalog - INFO - Loading data from 'houses' (CSVDataSet)...
2023-06-12 17:26:00,855 - kedro.io.data_catalog - INFO - Loading data from 'houses' (CSVDataSet)...
2023-06-12 17:31:41,852 - kedro.io.data_catalog - INFO - Loading data from 'houses' (CSVDataSet)...
2023-06-12 17:48:41,928 - kedro.io.data_catalog - INFO - Loading data from 'houses' (CSVDataSet)...
2023-06-12 17:53:00,186 - kedro.io.data_catalog - INFO - Loading data from 'houses' (CSVDataSet)...
2023-06-12 18:35:17,265 - kedro.ipython - INFO - Kedro project kedro-tutorial
2023-06-12 18:35:17,268 - kedro.ipython - INFO - Defined global variable 'context', 'session', 'catalog' and 'pipelines'
2023-06-12 18:35:18,302 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\envs\kedro-tutorial\lib\site-packages\strawberry\types\fields\resolver.py:199: DeprecationWarning: Argument name-based matching of 'info' is deprecated and will be removed in v1.0. Ensure that reserved arguments are annotated their respective types (i.e. use value: 'DirectiveValue[str]' instead of 'value: str' and 'info: Info' instead of a plain 'info').
  return {spec: spec.find(parameters, self) for spec in self.RESERVED_PARAMSPEC}

2023-06-12 18:35:19,209 - kedro.ipython - INFO - Registered line magic 'run_viz'
2023-06-12 18:35:19,218 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\envs\kedro-tutorial\lib\site-packages\tornado\ioloop.py:262: DeprecationWarning: There is no current event loop
  loop = asyncio.get_event_loop()

2023-06-12 18:35:20,030 - kedro.io.data_catalog - INFO - Loading data from 'houses' (CSVDataSet)...
2023-06-12 19:53:10,122 - kedro.ipython - INFO - Kedro project kedro-tutorial
2023-06-12 19:53:10,126 - kedro.ipython - INFO - Defined global variable 'context', 'session', 'catalog' and 'pipelines'
2023-06-12 19:53:10,848 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\envs\kedro-tutorial\lib\site-packages\strawberry\types\fields\resolver.py:199: DeprecationWarning: Argument name-based matching of 'info' is deprecated and will be removed in v1.0. Ensure that reserved arguments are annotated their respective types (i.e. use value: 'DirectiveValue[str]' instead of 'value: str' and 'info: Info' instead of a plain 'info').
  return {spec: spec.find(parameters, self) for spec in self.RESERVED_PARAMSPEC}

2023-06-12 19:53:11,683 - kedro.ipython - INFO - Registered line magic 'run_viz'
2023-06-12 19:53:11,691 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\envs\kedro-tutorial\lib\site-packages\tornado\ioloop.py:262: DeprecationWarning: There is no current event loop
  loop = asyncio.get_event_loop()

2023-06-13 14:55:46,927 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\envs\kedro-tutorial\lib\importlib\__init__.py:126: DeprecationWarning: `kedro.extras.datasets` is deprecated and will be removed in Kedro 0.19, install `kedro-datasets` instead by running `pip install kedro-datasets`.
  return _bootstrap._gcd_import(name[level:], package, level)

2023-06-13 14:55:46,955 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\envs\kedro-tutorial\lib\site-packages\tornado\ioloop.py:262: DeprecationWarning: There is no current event loop
  loop = asyncio.get_event_loop()

2023-06-13 14:55:49,505 - ipykernel.comm - ERROR - No such comm target registered: jupyter.widget.control
2023-06-13 14:55:49,513 - Comm - WARNING - No such comm: 9780dbd4-4546-432f-8912-6de6f0541ce4
2023-06-13 15:04:05,890 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\envs\kedro-tutorial\lib\importlib\__init__.py:126: DeprecationWarning: `kedro.extras.datasets` is deprecated and will be removed in Kedro 0.19, install `kedro-datasets` instead by running `pip install kedro-datasets`.
  return _bootstrap._gcd_import(name[level:], package, level)

2023-06-13 15:04:05,908 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\envs\kedro-tutorial\lib\site-packages\tornado\ioloop.py:262: DeprecationWarning: There is no current event loop
  loop = asyncio.get_event_loop()

2023-06-13 15:04:09,507 - ipykernel.comm - ERROR - No such comm target registered: jupyter.widget.control
2023-06-13 15:04:09,515 - Comm - WARNING - No such comm: b6894259-409a-442d-8f4c-2037c9a91ab3
2023-06-13 15:22:02,195 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\envs\kedro-tutorial\lib\importlib\__init__.py:126: DeprecationWarning: `kedro.extras.datasets` is deprecated and will be removed in Kedro 0.19, install `kedro-datasets` instead by running `pip install kedro-datasets`.
  return _bootstrap._gcd_import(name[level:], package, level)

2023-06-13 15:22:02,216 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\envs\kedro-tutorial\lib\site-packages\tornado\ioloop.py:262: DeprecationWarning: There is no current event loop
  loop = asyncio.get_event_loop()

2023-06-13 15:24:08,667 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\envs\kedro-tutorial\lib\importlib\__init__.py:126: DeprecationWarning: `kedro.extras.datasets` is deprecated and will be removed in Kedro 0.19, install `kedro-datasets` instead by running `pip install kedro-datasets`.
  return _bootstrap._gcd_import(name[level:], package, level)

2023-06-13 15:24:08,689 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\envs\kedro-tutorial\lib\site-packages\tornado\ioloop.py:262: DeprecationWarning: There is no current event loop
  loop = asyncio.get_event_loop()

2023-06-13 15:24:09,739 - ipykernel.comm - ERROR - No such comm target registered: jupyter.widget.control
2023-06-13 15:24:09,748 - Comm - WARNING - No such comm: 8b035119-474d-49d2-a784-7c7b074f91b5
2023-06-13 17:18:32,115 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\envs\kedro-tutorial\lib\importlib\__init__.py:126: DeprecationWarning: `kedro.extras.datasets` is deprecated and will be removed in Kedro 0.19, install `kedro-datasets` instead by running `pip install kedro-datasets`.
  return _bootstrap._gcd_import(name[level:], package, level)

2023-06-13 17:18:32,135 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\envs\kedro-tutorial\lib\site-packages\tornado\ioloop.py:262: DeprecationWarning: There is no current event loop
  loop = asyncio.get_event_loop()

2023-06-13 20:37:38,015 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\envs\kedro-tutorial\lib\importlib\__init__.py:126: DeprecationWarning: `kedro.extras.datasets` is deprecated and will be removed in Kedro 0.19, install `kedro-datasets` instead by running `pip install kedro-datasets`.
  return _bootstrap._gcd_import(name[level:], package, level)

2023-06-13 20:37:38,050 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\envs\kedro-tutorial\lib\site-packages\tornado\ioloop.py:262: DeprecationWarning: There is no current event loop
  loop = asyncio.get_event_loop()

2023-06-13 20:40:50,082 - kedro.framework.session.session - INFO - Kedro project kedro-tutorial
2023-06-13 20:43:36,284 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\envs\kedro-tutorial\lib\importlib\__init__.py:126: DeprecationWarning: `kedro.extras.datasets` is deprecated and will be removed in Kedro 0.19, install `kedro-datasets` instead by running `pip install kedro-datasets`.
  return _bootstrap._gcd_import(name[level:], package, level)

2023-06-13 20:43:36,303 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\envs\kedro-tutorial\lib\site-packages\tornado\ioloop.py:262: DeprecationWarning: There is no current event loop
  loop = asyncio.get_event_loop()

2023-06-13 20:43:37,882 - ipykernel.comm - ERROR - No such comm target registered: jupyter.widget.control
2023-06-13 20:43:37,890 - Comm - WARNING - No such comm: e3ca1462-64b7-45f8-9b22-4afdbd9d6a5b
2023-06-13 20:46:12,736 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\envs\kedro-tutorial\lib\importlib\__init__.py:126: DeprecationWarning: `kedro.extras.datasets` is deprecated and will be removed in Kedro 0.19, install `kedro-datasets` instead by running `pip install kedro-datasets`.
  return _bootstrap._gcd_import(name[level:], package, level)

2023-06-13 20:46:12,755 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\envs\kedro-tutorial\lib\site-packages\tornado\ioloop.py:262: DeprecationWarning: There is no current event loop
  loop = asyncio.get_event_loop()

2023-06-13 20:46:18,085 - ipykernel.comm - ERROR - No such comm target registered: jupyter.widget.control
2023-06-13 20:46:18,091 - Comm - WARNING - No such comm: 8097fed1-b8fd-4d8c-af22-fadad17828ec
2023-06-13 20:49:12,151 - kedro.framework.session.session - INFO - Kedro project kedro-tutorial
2023-06-13 20:49:13,047 - kedro.io.data_catalog - INFO - Loading data from 'data' (CSVDataSet)...
2023-06-13 20:49:13,121 - kedro.pipeline.node - INFO - Running node: clean_data_node: clean_data([data]) -> [cleaned_data]
2023-06-13 20:49:13,124 - kedro.pipeline.node - ERROR - Node 'clean_data_node: clean_data([data]) -> [cleaned_data]' failed with error: 
local variable 'data_clean' referenced before assignment
2023-06-13 20:49:13,152 - kedro.runner.sequential_runner - WARNING - No nodes ran. Repeat the previous command to attempt a new run.
2023-06-13 20:49:39,822 - kedro.framework.session.session - INFO - Kedro project kedro-tutorial
2023-06-13 20:49:40,605 - kedro.io.data_catalog - INFO - Loading data from 'data' (CSVDataSet)...
2023-06-13 20:49:40,662 - kedro.pipeline.node - INFO - Running node: clean_data_node: clean_data([data]) -> [cleaned_data]
2023-06-13 20:49:40,720 - kedro.io.data_catalog - INFO - Saving data to 'cleaned_data' (CSVDataSet)...
2023-06-13 20:49:40,776 - kedro.runner.sequential_runner - INFO - Completed 1 out of 1 tasks
2023-06-13 20:49:40,778 - kedro.runner.sequential_runner - INFO - Pipeline execution completed successfully.
2023-06-13 20:50:05,561 - kedro.ipython - INFO - Kedro project kedro-tutorial
2023-06-13 20:50:05,564 - kedro.ipython - INFO - Defined global variable 'context', 'session', 'catalog' and 'pipelines'
2023-06-13 20:50:07,003 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\envs\kedro-tutorial\lib\site-packages\strawberry\types\fields\resolver.py:199: DeprecationWarning: Argument name-based matching of 'info' is deprecated and will be removed in v1.0. Ensure that reserved arguments are annotated their respective types (i.e. use value: 'DirectiveValue[str]' instead of 'value: str' and 'info: Info' instead of a plain 'info').
  return {spec: spec.find(parameters, self) for spec in self.RESERVED_PARAMSPEC}

2023-06-13 20:50:07,879 - kedro.ipython - INFO - Registered line magic 'run_viz'
2023-06-13 20:50:07,886 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\envs\kedro-tutorial\lib\site-packages\tornado\ioloop.py:262: DeprecationWarning: There is no current event loop
  loop = asyncio.get_event_loop()

2023-06-13 20:50:13,018 - kedro.io.data_catalog - INFO - Loading data from 'cleaned_data' (CSVDataSet)...
2023-06-13 22:35:36,470 - kedro.framework.session.session - INFO - Kedro project kedro-tutorial
2023-06-13 22:35:38,974 - kedro.io.data_catalog - INFO - Loading data from 'data' (CSVDataSet)...
2023-06-13 22:35:39,032 - kedro.pipeline.node - INFO - Running node: clean_data_node: clean_data([data]) -> [cleaned_data]
2023-06-13 22:35:39,089 - kedro.io.data_catalog - INFO - Saving data to 'cleaned_data' (CSVDataSet)...
2023-06-13 22:35:39,141 - kedro.runner.sequential_runner - INFO - Completed 1 out of 1 tasks
2023-06-13 22:35:39,143 - kedro.runner.sequential_runner - INFO - Pipeline execution completed successfully.
2023-06-13 22:44:16,670 - kedro.ipython - INFO - Kedro project kedro-tutorial
2023-06-13 22:44:16,673 - kedro.ipython - INFO - Defined global variable 'context', 'session', 'catalog' and 'pipelines'
2023-06-13 22:44:18,836 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\envs\kedro-tutorial\lib\site-packages\strawberry\types\fields\resolver.py:199: DeprecationWarning: Argument name-based matching of 'info' is deprecated and will be removed in v1.0. Ensure that reserved arguments are annotated their respective types (i.e. use value: 'DirectiveValue[str]' instead of 'value: str' and 'info: Info' instead of a plain 'info').
  return {spec: spec.find(parameters, self) for spec in self.RESERVED_PARAMSPEC}

2023-06-13 22:44:20,362 - kedro.ipython - INFO - Registered line magic 'run_viz'
2023-06-13 22:44:20,373 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\envs\kedro-tutorial\lib\site-packages\tornado\ioloop.py:262: DeprecationWarning: There is no current event loop
  loop = asyncio.get_event_loop()

2023-06-13 22:45:55,748 - kedro.io.data_catalog - INFO - Loading data from 'cleaned_data' (CSVDataSet)...
2023-06-13 22:58:55,333 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\envs\kedro-tutorial\lib\site-packages\sklearn\preprocessing\_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.
  warnings.warn(

2023-06-13 23:01:06,081 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,086 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,092 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,097 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,103 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,109 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,114 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,119 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,124 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,129 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,135 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,140 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,145 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,151 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,157 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,161 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,166 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,172 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,178 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,182 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,188 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,193 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,198 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,203 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,208 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,213 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,218 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,224 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,229 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,234 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,239 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,244 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,249 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,254 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,260 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,264 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,270 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,275 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,280 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,286 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,291 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,296 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,300 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,306 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,311 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,316 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,321 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,325 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,331 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,336 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,341 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,346 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,351 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,356 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,361 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,367 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,372 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,377 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,382 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,387 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,392 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,399 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,404 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,410 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,414 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,419 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,424 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,429 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,434 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,438 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,444 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,450 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,454 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,459 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,463 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,468 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,473 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,478 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,484 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,489 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,494 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,499 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,503 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,509 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,513 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,519 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,525 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,529 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,535 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,540 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,545 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,550 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,555 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,560 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,565 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,570 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,574 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,579 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,584 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,589 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,595 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,600 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,605 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,610 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,616 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,621 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,626 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,631 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,636 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,641 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,646 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,653 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,658 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,662 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,672 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,677 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,681 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,686 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,691 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,696 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,701 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,706 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,711 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,716 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,721 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,726 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,731 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,737 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,741 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,746 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,750 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,755 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,760 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,765 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,770 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,775 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,780 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,785 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,791 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,796 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,801 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,806 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,812 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,817 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,822 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,827 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,831 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,836 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,842 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,847 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,853 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,858 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,863 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,869 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,874 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,878 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,883 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,889 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,894 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,898 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,904 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,908 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,913 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,919 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,924 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,929 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,935 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,940 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,946 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,951 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,956 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,961 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,966 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,971 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,976 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,981 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,986 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,991 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:06,995 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,000 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,006 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,011 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,016 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,021 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,026 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,031 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,036 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,041 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,046 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,052 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,057 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,063 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,069 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,075 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,080 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,085 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,090 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,095 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,100 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,105 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,110 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,115 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,120 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,125 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,130 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,135 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,141 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,147 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,152 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,157 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,162 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,167 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,173 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,181 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,187 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,193 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,199 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,204 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,209 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,214 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,219 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,224 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,229 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,235 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,241 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,246 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,251 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,257 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,262 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,268 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,273 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,278 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,283 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,288 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,293 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,299 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,304 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,310 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,314 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,320 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,325 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,330 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,335 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,340 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,345 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,350 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,355 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,361 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,367 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,372 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,378 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,383 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,389 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,394 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,399 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,405 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,411 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,416 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,423 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,429 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,436 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,441 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,445 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,451 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,456 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,461 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,467 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,473 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,478 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,485 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,490 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,495 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,501 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,506 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,512 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,517 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,523 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,528 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,534 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,540 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,545 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,551 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,558 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,562 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,568 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,573 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,579 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,584 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,590 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,596 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,601 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,609 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,615 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,620 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,626 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,632 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,638 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,643 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,648 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,655 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,660 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,665 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,670 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,675 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,679 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,685 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,690 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,696 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,701 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,707 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,712 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,717 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,722 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,727 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,732 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,737 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,743 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,748 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,752 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,757 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,763 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,768 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,774 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,780 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,785 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,790 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,796 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,801 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,806 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,811 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,818 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,823 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,829 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,835 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,840 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,845 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,852 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,858 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,863 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,869 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,874 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,879 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,884 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,889 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,894 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,899 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,905 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,910 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,915 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,920 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,925 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,930 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,937 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,942 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,947 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,952 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,956 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,961 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,967 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,973 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,978 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,983 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,989 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:07,994 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,000 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,005 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,011 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,016 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,022 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,028 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,034 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,039 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,046 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,051 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,057 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,061 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,068 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,073 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,078 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,084 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,089 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,094 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,099 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,105 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,111 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,120 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,126 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,132 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,138 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,143 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,148 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,154 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,159 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,164 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,169 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,174 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,179 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,184 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,189 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,194 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,199 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,205 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,210 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,216 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,222 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,227 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,233 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,240 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,245 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,250 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,255 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,261 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,267 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,273 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,278 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,284 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,290 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,295 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,300 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,306 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,311 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,317 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,322 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,327 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,332 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,339 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,344 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,349 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,355 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,360 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,365 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,371 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,377 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,382 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,387 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,393 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,398 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,404 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,409 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,414 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,419 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,424 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,429 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,435 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,441 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,446 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,452 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,457 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,462 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,468 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,474 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,478 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,484 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,489 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,494 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,499 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,505 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,510 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,515 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,521 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,526 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,531 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,536 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,542 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,547 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,553 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,559 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,564 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,569 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,575 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,580 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,585 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,591 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,595 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,600 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,606 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,611 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,617 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,622 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,627 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,633 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,639 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,645 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,651 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,657 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,663 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,668 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,674 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,679 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,686 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,692 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,698 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,704 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,709 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,714 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,720 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,725 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,733 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,742 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,747 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,754 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,760 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,767 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,773 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,778 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,784 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,791 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,796 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,801 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,807 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,813 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,820 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,825 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,829 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,834 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,842 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,847 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,852 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,858 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,864 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,869 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,875 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,880 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,886 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,892 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,898 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,904 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,909 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,915 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,920 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,926 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,931 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,938 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,944 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,951 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,956 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,961 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,966 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,972 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,978 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,984 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,990 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:08,995 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,000 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,007 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,012 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,021 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,026 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,031 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,037 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,042 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,047 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,051 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,057 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,062 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,067 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,073 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,078 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,082 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,088 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,093 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,098 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,103 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,109 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,114 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,119 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,124 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,129 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,135 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,140 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,145 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,150 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,155 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,161 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,166 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,172 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,177 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,182 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,187 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,193 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,199 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,204 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,209 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,214 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,219 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,224 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,229 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,235 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,240 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,246 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,250 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,257 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,262 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,267 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,272 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,278 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,284 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,289 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,294 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,300 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,306 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,310 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,316 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,320 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,326 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,331 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,335 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,341 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,346 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,351 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,356 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,361 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,366 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,371 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,376 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,381 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,387 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,392 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,397 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,402 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,410 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,415 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,420 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,425 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,430 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,435 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,440 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,445 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,451 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,455 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,460 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,464 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,470 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,476 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,481 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,487 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,491 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,496 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,501 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,506 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,511 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,516 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,523 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,529 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,535 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,540 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,545 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,551 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,556 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,561 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,567 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,573 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,578 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,583 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,588 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,593 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,598 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,604 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,609 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,614 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,619 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,625 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,629 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,635 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,640 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,645 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,650 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,655 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,660 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,665 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,670 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,675 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,680 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,685 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,691 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,695 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,701 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,706 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,711 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,715 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,722 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,727 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,732 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,738 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,743 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,747 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,752 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,757 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,762 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,767 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,773 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,777 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,783 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,789 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,794 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,798 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,804 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,809 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,814 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,819 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,824 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,830 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,835 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,840 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,845 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,850 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,856 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,861 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,865 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,871 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,876 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,881 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,885 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,891 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,896 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,902 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,906 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,911 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,916 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,922 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,928 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,933 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,939 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,944 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,949 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,954 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,959 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,965 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,970 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,975 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,980 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,986 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,990 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:09,996 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,001 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,007 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,011 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,016 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,021 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,026 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,031 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,037 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,042 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,047 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,054 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,059 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,065 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,071 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,076 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,082 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,087 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,093 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,098 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,104 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,110 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,115 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,121 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,126 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,131 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,136 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,141 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,148 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,153 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,159 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,165 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,172 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,177 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,182 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,188 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,193 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,198 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,204 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,210 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,215 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,222 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,229 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,237 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,243 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,248 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,252 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,258 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,263 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,268 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,273 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,278 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,283 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,288 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,293 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,298 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,310 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,315 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,321 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,326 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,331 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,336 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,342 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,347 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,353 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,358 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,363 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,368 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,374 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,379 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,384 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,390 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,395 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,401 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,406 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,411 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,416 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,421 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,427 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,432 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,438 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,443 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,448 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,453 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,458 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,463 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,468 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,473 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,479 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,484 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,489 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,495 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,500 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,506 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,510 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,514 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,520 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,525 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,530 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,535 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,540 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,546 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,551 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,558 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,564 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,569 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,574 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,579 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,584 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,589 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,595 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,601 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,607 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,612 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,618 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,623 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,628 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,633 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,638 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,643 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,648 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,654 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,659 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,664 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,670 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,674 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,680 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,684 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,690 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,695 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,701 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,706 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,710 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,716 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,721 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,726 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,732 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,737 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,742 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,747 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,752 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,757 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,761 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,769 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,774 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,779 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,784 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,790 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,795 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,801 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,806 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,812 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,818 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,823 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,828 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,833 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,839 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,843 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,849 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,855 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,860 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,865 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,869 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,875 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,879 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,885 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,891 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,897 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,903 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,908 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,913 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,919 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,924 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,929 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,935 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,940 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,945 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,951 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,956 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,962 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,968 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,974 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,981 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,987 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,992 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:10,999 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,005 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,012 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,019 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,025 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,030 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,037 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,042 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,048 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,055 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,061 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,067 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,072 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,078 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,084 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,090 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,095 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,101 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,107 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,112 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,118 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,123 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,128 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,134 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,140 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,145 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,150 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,156 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,161 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,166 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,172 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,177 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,183 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,188 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,194 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,200 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,205 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,211 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,218 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,223 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,229 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,235 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,240 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,246 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,250 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,257 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,262 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,267 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,272 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,278 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,284 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,289 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,294 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,299 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,305 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,310 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,315 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,321 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,326 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,330 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,336 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,341 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,346 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,352 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,358 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,363 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,369 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,374 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,379 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,385 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,392 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,397 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,404 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,415 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,420 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,426 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,431 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,437 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,442 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,447 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,453 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,458 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,464 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,470 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,477 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,483 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,488 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,494 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,499 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,504 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,510 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,516 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,521 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,526 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,530 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,536 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,542 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,549 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,554 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,559 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,566 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,572 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,578 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,582 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,588 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,594 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,599 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,605 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,611 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,617 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,622 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,626 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,633 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,638 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,643 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,649 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,656 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,662 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,667 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,675 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,680 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,686 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,691 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,696 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,702 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,707 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,712 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,718 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,724 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,729 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,735 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,740 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,746 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,751 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,757 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,762 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,768 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,774 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,780 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,787 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,792 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,798 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,803 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,808 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,814 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,820 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,826 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,832 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,838 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,843 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,850 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,855 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,860 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,866 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,871 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,878 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,884 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,890 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,896 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,903 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,909 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,915 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,920 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,926 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,931 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,936 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,942 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,947 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,953 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,959 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,964 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,969 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,974 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,979 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,984 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,989 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,994 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:11,998 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,004 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,010 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,015 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,021 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,026 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,030 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,035 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,041 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,046 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,052 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,057 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,062 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,069 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,074 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,079 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,084 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,089 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,094 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,099 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,105 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,110 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,115 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,120 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,126 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,135 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,139 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,145 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,150 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,155 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,160 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,165 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,171 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,176 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,181 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,187 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,191 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,197 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,202 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,207 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,213 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,219 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,225 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,230 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,236 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,241 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,246 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,251 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,257 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,262 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,268 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,273 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,279 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,284 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,290 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,295 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,301 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,307 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,312 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,317 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,323 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,328 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,333 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,338 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,343 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,348 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,354 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,359 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,364 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,369 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,374 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,379 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,385 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,390 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,396 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,404 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,410 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,416 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,421 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,426 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,431 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,437 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,443 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,448 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,453 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,459 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,464 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,470 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,475 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,480 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,486 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,491 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,496 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,502 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,508 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,513 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,519 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,524 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,529 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,535 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,540 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,546 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,551 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,557 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,562 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,567 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,572 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,578 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,583 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,589 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,595 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,600 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,605 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,611 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,617 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,622 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,626 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,632 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,636 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,642 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,647 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,653 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,657 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,663 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,668 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,674 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,679 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,683 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,688 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,694 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,699 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,704 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,709 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,714 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,719 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,724 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,729 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,735 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,740 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,745 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,750 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,756 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,762 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,768 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,778 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,783 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,787 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,793 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,799 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,805 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,810 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,815 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,820 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,825 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,831 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,836 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,841 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,846 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,851 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,856 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,861 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,866 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,872 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,877 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,883 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,889 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,894 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,900 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,905 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,910 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,916 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,920 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,925 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,931 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,936 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,941 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,946 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,951 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,957 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,962 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,967 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,973 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,977 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,983 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,987 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,993 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:12,998 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,003 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,007 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,013 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,018 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,023 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,029 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,035 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,040 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,044 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,050 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,055 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,060 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,065 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,070 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,075 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,080 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,085 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,091 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,096 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,102 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,106 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,111 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,117 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,122 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,127 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,132 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,138 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,143 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,149 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,154 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,159 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,164 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,169 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,175 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,179 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,184 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,190 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,195 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,200 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,206 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,211 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,216 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,222 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,227 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,232 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,237 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,242 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,247 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,252 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,257 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,262 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,267 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,272 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,277 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,282 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,287 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,292 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,298 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,303 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,309 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,314 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,320 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,325 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,330 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,335 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,341 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,346 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,351 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,357 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,362 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,367 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,372 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,378 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,383 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,388 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,393 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,398 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,403 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,408 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,414 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,418 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,425 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,429 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,435 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,441 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,446 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,451 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,457 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,463 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,468 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,473 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,478 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,483 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,494 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,499 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,505 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,510 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,515 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,521 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,526 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,530 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,537 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,542 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,547 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,552 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,558 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,563 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,567 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,572 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,578 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,582 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,587 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,592 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,598 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,603 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,608 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,614 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,619 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,625 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,630 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,637 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,643 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,649 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,654 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,659 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,664 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,670 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,676 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,681 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,686 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,692 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,697 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,702 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,708 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,713 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,718 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,723 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,729 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,735 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,741 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,746 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,752 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,759 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,763 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,768 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,774 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,779 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,785 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,789 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,795 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,800 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,806 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,812 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,818 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,824 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,830 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,836 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,841 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,847 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,852 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,857 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,863 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,869 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,875 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,882 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,889 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,894 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,899 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,904 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,910 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,915 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,920 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,925 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,931 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,938 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,943 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,948 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,955 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,960 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,966 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,971 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,976 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,981 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,986 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,992 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:13,998 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,003 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,009 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,013 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,018 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,024 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,029 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,034 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,040 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,045 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,050 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,055 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,061 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,066 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,071 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,077 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,082 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,087 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,093 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,098 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,103 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,108 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,112 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,117 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,123 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,128 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,133 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,138 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,143 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,148 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,154 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,158 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,163 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,169 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,175 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,181 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,186 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,191 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,197 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,203 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,208 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,213 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,218 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,223 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,229 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,235 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,240 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,245 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,250 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,257 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,262 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,268 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,275 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,280 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,285 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,290 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,295 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,301 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,306 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,312 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,317 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,323 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,327 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,333 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,337 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,343 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,348 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,353 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,359 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,364 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,369 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,375 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,380 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,385 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,390 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,396 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,400 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,406 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,412 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,416 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,422 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,427 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,432 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,438 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,443 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,448 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,452 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,458 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,464 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,470 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,475 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,480 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,485 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,490 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,495 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,500 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,505 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,511 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,524 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,530 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,535 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,540 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,545 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,550 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,556 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,562 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,568 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,573 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,578 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,583 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,588 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,593 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,598 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,604 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,609 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,615 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,620 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,625 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,630 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,635 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,641 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,647 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,652 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,658 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,662 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,667 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,673 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,678 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,683 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,688 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,694 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,699 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,704 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,709 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,714 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,719 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,724 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,730 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,735 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,740 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,745 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,750 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,755 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,759 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,765 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,770 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,776 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,780 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,785 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,791 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,796 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,802 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,807 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,812 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,817 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,823 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,828 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,833 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,838 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,843 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,848 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,852 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,858 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,863 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,869 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,874 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,878 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,884 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,889 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,896 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,901 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,906 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,911 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,916 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,921 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,927 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,932 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,937 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,941 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,947 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,952 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,956 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,961 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,966 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,972 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,977 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,982 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,987 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,992 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:14,997 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,003 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,007 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,013 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,018 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,023 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,029 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,035 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,041 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,047 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,052 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,057 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,063 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,069 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,074 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,080 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,086 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,092 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,098 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,104 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,109 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,114 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,119 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,125 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,131 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,137 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,143 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,148 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,153 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,159 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,165 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,170 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,175 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,181 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,186 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,192 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,197 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,203 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,208 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,215 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,220 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,226 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,231 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,236 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,241 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,246 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,251 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,256 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,261 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,266 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,271 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,277 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,282 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,288 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,292 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,298 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,304 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,308 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,313 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,318 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,323 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,328 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,333 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,338 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,344 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,348 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,353 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,358 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,363 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,368 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,374 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,379 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,384 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,389 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,394 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,400 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,405 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,410 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,415 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,420 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,426 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,431 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,436 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,441 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,446 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,451 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,457 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,462 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,467 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,472 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,478 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,483 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,488 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,493 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,498 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,503 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,509 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,513 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,519 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,525 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,530 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,535 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,540 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,545 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,550 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,555 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,560 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,565 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,571 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,576 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,580 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,587 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,592 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,597 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,603 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,609 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,615 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,620 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,625 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,630 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,635 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,640 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,644 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,650 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,655 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,660 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,665 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,670 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,675 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,680 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,685 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,690 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,696 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,701 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,705 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,711 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,716 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,721 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,727 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,732 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,737 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,742 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,747 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,753 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,759 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,763 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,768 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,773 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,778 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,783 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,788 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,793 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,798 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,803 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,808 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,813 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,818 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,823 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,828 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,833 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,838 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,843 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,848 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,853 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,860 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,865 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,870 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,875 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,879 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,885 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,890 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,895 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,901 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,905 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,911 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,917 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,922 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,928 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,933 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,937 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,942 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,948 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,953 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,959 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,964 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,969 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,974 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,979 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,984 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,989 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:15,995 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,000 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,005 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,010 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,016 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,021 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,027 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,032 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,038 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,043 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,048 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,054 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,059 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,064 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,069 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,074 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,080 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,085 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,090 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,096 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,101 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,106 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,111 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,117 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,121 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,126 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,131 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,136 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,142 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,146 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,152 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,158 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,163 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,168 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,173 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,178 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,185 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,190 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,196 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,201 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,207 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,211 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,216 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,221 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,226 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,232 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,236 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,241 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,247 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,252 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,257 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,262 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,267 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,273 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,278 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,283 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,289 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,294 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,300 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,305 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,310 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,315 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,320 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,325 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,331 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,336 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,341 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,346 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,351 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,355 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,361 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,366 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,372 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,378 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,383 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,388 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,393 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,398 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,403 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,408 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,413 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,419 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,424 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,429 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,434 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,439 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,444 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,449 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,454 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,459 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,464 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,469 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,475 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,479 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,485 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,490 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,495 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,500 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,505 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,510 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,517 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,523 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,528 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,533 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,538 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,543 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,549 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,554 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,561 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,567 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,572 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,578 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,583 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,588 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,593 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,599 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,605 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,610 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,614 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,619 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,624 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,629 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,634 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,639 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,644 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,650 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,656 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,661 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,666 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,671 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,676 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,681 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,687 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,692 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,697 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,702 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,708 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,712 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,718 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,723 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,728 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,734 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,739 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,744 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,751 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,757 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,761 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,767 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,772 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,777 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,782 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,787 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,793 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,799 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,803 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,809 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,813 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,819 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,824 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,830 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,834 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,840 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,845 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,851 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,856 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,862 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,867 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,872 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,878 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,883 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,889 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,895 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,900 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,905 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,910 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,915 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,920 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,925 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,930 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,935 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,940 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,946 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,952 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,957 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,962 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,967 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,973 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,978 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,983 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,989 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,993 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:16,999 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,005 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,010 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,015 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,021 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,027 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,032 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,037 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,043 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,049 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,054 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,059 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,065 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,070 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,076 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,081 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,086 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,091 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,096 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,102 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,107 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,113 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,119 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,124 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,129 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,134 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,139 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,145 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,150 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,155 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,160 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,165 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,172 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,179 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,189 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,194 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,199 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,205 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,210 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,215 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,221 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,226 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,232 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,236 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,242 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,248 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,253 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,258 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,262 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,267 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,273 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,278 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,284 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,290 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,294 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,300 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,306 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,311 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,317 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,323 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,327 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,333 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,338 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,343 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,348 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,354 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,358 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,363 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,368 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,374 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,379 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,385 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,390 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,396 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,402 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,407 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,414 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,418 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,424 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,429 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,433 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,439 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,444 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,449 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,455 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,460 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,466 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,472 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,477 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,482 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,488 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,494 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,499 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,504 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,510 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,515 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,520 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,525 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,531 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,537 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,543 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,548 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,552 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,557 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,562 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,567 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,573 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,579 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,585 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,590 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,596 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,602 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,607 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,612 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,617 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,622 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,627 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,632 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,637 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,643 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,647 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,653 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,657 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,662 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,667 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,673 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,678 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,683 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,688 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,693 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,699 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,704 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,709 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,714 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,719 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,724 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,731 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,737 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,742 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,747 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,753 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,759 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,765 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,769 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,775 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,780 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,785 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,790 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,795 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,801 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,806 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,811 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,817 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,822 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,827 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,832 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,837 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,844 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,849 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,854 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,859 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,863 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,869 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,874 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,879 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,885 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,891 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,896 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,901 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,907 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,911 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,917 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,922 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,928 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,933 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,938 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,943 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,947 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,952 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,957 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,963 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,968 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,973 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,978 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,983 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,988 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,993 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:17,998 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,003 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,009 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,013 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,018 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,023 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,028 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,033 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,039 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,044 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,049 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,055 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,059 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,065 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,070 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,075 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,080 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,085 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,090 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,095 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,100 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,105 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,111 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,117 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,122 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,126 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,131 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,136 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,141 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,147 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,152 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,156 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,162 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,168 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,173 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,179 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,184 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,189 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,195 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,200 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,206 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,210 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,215 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,220 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,225 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,230 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,236 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,242 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,248 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,253 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,258 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,263 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,268 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,273 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,278 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,284 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,289 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,294 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,299 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,305 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,310 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,314 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,320 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,325 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,330 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,336 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,342 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,347 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,352 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,358 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,362 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,367 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,372 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,378 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,383 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,388 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,393 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,399 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,404 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,409 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,414 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,419 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,424 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,429 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,435 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,440 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,444 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,449 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,455 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,461 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,465 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,470 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,475 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,480 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,485 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,490 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,495 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,500 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,505 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,511 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,517 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,522 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,527 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,532 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,537 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,542 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,547 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,553 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,559 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,565 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,570 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,575 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,580 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,585 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,591 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,597 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,602 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,607 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,613 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,619 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,625 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,631 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,637 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,642 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,648 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,654 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,661 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,666 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,671 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,677 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,682 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,689 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,696 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,701 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,706 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,711 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,717 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,722 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,728 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,734 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,740 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,746 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,752 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,758 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,764 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,769 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,775 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,780 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,786 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,791 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,797 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,802 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,807 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,813 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,819 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,824 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,830 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,837 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,844 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,850 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,855 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,860 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,866 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,872 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,878 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,883 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,889 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,895 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,902 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,908 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,914 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,919 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,924 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,930 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,935 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,942 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,948 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,953 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,959 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,965 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,972 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,978 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,983 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,988 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,994 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:18,999 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,005 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,011 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,017 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,023 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,028 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,034 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,039 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,044 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,051 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,056 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,061 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,068 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,075 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,080 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,086 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,091 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,099 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,105 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,111 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,117 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,122 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,128 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,133 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,138 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,143 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,149 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,154 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,159 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,164 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,169 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,175 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,180 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,186 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,192 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,197 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,202 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,208 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,213 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,218 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,223 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,229 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,234 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,240 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,244 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,249 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,254 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,261 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,266 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,272 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,277 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,282 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,287 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,293 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,298 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,304 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,309 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,316 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,322 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,328 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,333 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,338 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,344 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,349 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,354 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,359 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,364 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,369 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,375 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,380 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,386 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,392 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,397 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,402 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,407 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,413 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,419 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,425 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,429 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,435 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,440 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,444 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,449 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,454 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,460 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,465 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,470 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,475 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,480 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,485 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,491 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,496 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,501 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,507 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,513 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,517 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,523 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,528 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,532 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,538 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,543 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,548 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,554 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,560 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,565 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,571 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,577 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,582 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,588 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,594 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,600 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,606 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,611 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,616 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,621 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,626 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,632 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,638 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,644 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,649 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,655 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,660 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,665 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,670 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,676 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,681 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,686 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,691 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,696 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,701 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,707 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,713 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,718 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,723 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,728 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,735 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,741 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,745 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,750 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,755 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,760 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,765 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,771 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,776 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,781 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,786 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,791 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,796 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,802 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,807 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,813 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,818 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,823 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,829 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,834 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,840 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,845 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,850 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,855 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,861 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,866 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,871 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,875 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,881 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,887 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,893 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,899 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,904 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,909 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,915 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,922 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,929 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,935 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,949 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,955 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,960 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,965 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,970 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,975 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,981 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,987 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,993 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:19,998 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,003 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,009 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,014 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,019 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,025 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,030 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,035 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,040 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,047 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,054 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,060 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,066 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,071 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,076 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,082 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,087 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,094 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,099 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,106 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,111 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,117 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,123 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,128 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,133 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,138 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,144 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,149 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,155 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,162 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,169 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,176 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,182 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,188 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,195 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,201 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,207 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,212 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,218 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,223 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,228 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,233 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,239 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,246 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,251 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,257 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,263 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,268 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,273 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,279 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,283 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,289 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,294 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,299 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,305 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,310 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,315 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,321 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,328 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,333 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,339 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,345 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,350 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,356 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,361 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,366 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,371 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,376 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,381 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,386 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,391 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,397 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,403 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,409 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,414 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,419 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,424 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,429 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,435 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,440 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,445 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,450 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,455 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,460 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,466 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,472 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,477 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,482 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,487 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,492 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,498 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,504 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,510 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,516 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,521 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,527 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,533 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,538 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,543 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,549 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,553 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,559 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,565 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,570 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,576 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,581 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,586 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,591 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,597 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,602 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,607 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,613 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,618 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,623 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,628 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,633 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,638 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,645 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,649 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,655 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,661 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,665 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,671 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,678 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,684 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,689 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,695 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,700 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,706 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,711 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,716 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,721 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,727 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,732 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,738 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,743 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,749 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,754 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,759 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,764 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,769 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,775 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,780 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,785 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,790 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,795 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,801 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,806 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,812 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,817 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,822 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,827 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,833 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,838 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,844 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,849 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,854 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,859 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,864 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,869 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,875 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,881 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,886 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,891 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,896 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,901 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,906 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,911 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,917 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,922 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,927 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,932 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,937 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,942 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,947 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,952 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,958 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,963 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,969 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,975 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,980 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,985 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,989 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:20,995 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,000 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,005 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,011 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,016 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,022 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,027 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,033 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,038 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,043 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,048 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,053 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,058 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,064 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,069 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,073 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,078 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,084 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,089 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,095 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,100 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,105 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,109 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,115 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,120 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,126 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,131 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,136 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,141 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,147 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,152 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,158 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,164 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,169 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,173 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,178 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,183 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,188 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,194 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,200 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,205 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,210 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,215 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,219 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,225 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,230 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,235 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,241 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,247 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,252 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,257 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,262 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,267 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,273 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,279 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,283 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,288 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,293 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,298 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,303 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,310 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,315 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,320 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,325 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,330 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,335 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,341 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,346 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,351 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,356 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,361 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,366 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,371 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,377 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,383 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,387 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,393 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,398 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,403 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,408 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,414 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,418 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,424 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,429 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,434 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,440 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,445 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,450 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,455 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,460 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,465 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,470 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,476 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,481 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,487 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,493 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,498 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,504 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,509 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,515 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,520 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,526 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,532 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,537 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,543 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,548 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,554 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,559 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,565 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,570 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,576 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,581 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,586 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,591 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,596 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,601 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,607 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,612 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,618 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,623 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,627 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,633 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,638 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,644 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,649 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,654 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,659 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,670 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,675 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,680 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,686 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,691 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,697 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,702 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,707 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,713 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,718 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,723 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,728 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,733 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,738 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,744 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,750 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,756 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,761 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,766 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,770 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,776 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,782 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,787 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,793 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,798 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,803 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,808 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,814 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,819 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,824 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,829 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,835 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,840 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,845 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,850 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,855 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,860 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,865 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,871 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,876 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,881 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,886 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,891 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,896 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,902 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,909 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,915 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,923 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,930 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,937 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,943 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,948 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,955 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,961 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,967 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,972 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,977 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,982 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,987 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:21,993 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,000 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,006 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,012 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,019 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,028 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,036 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,042 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,049 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,055 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,061 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,070 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,078 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,085 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,095 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,102 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,110 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,118 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,132 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,144 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,154 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,164 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,171 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,178 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,186 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,197 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,207 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,215 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,223 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,232 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,241 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,250 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,258 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,268 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,277 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,284 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,291 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,297 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,304 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,311 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,318 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,326 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,334 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,341 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,349 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,355 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,362 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,373 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,384 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,393 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,402 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,413 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,422 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,429 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,436 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,444 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,451 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,458 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,464 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,470 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,476 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,481 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,487 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,494 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,499 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,505 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,511 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,516 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,521 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,528 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,535 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,540 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,546 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,552 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,557 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,562 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,568 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,575 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,581 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,587 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,592 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,598 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,603 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,609 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,614 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,619 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,626 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,632 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,638 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,643 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,648 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,654 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,659 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,665 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,671 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,676 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,681 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,686 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,692 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,697 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,702 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,708 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,715 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,720 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,726 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,731 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,736 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,741 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,746 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,753 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,758 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,762 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,767 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,772 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,778 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,783 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,789 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,793 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,799 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,806 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,811 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,816 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,822 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,829 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,834 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,852 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,858 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,863 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,869 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,874 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,879 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,885 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,892 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,897 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,902 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,907 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,913 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,918 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,923 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,928 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,934 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,940 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,947 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,952 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,957 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,963 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,968 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,973 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,978 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,983 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,988 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,994 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:22,999 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,005 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,011 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,018 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,025 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,033 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,040 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,046 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,052 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,058 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,064 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,071 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,076 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,081 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,086 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,092 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,098 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,105 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,110 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,116 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,122 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,128 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,134 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,140 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,146 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,153 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,159 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,165 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,171 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,177 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,183 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,188 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,193 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,199 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,205 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,210 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,215 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,220 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,226 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,231 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,237 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,243 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,249 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,255 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,261 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,266 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,272 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,278 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,284 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,289 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,295 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,301 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,308 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,313 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,319 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,324 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,330 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,335 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,341 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,346 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,351 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,357 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,362 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,367 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,373 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,379 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,384 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,389 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,395 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,400 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,406 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,411 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,416 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,422 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,428 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,434 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,440 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,445 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,450 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,455 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,460 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,467 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,473 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,479 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,485 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,492 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,498 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,505 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,510 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,516 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,523 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,530 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,536 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,543 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,549 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,557 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,564 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,570 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,577 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,584 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,591 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,597 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,603 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,609 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,616 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,623 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,631 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,640 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,646 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,651 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,659 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,664 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,671 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,678 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,686 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,692 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,699 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,705 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,712 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,718 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,725 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,731 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,738 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,745 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,753 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,764 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,775 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,786 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,796 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,808 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,819 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,829 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,840 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,851 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,863 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,872 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,882 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,892 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,899 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,906 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,912 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,919 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,928 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,937 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,944 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,952 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,959 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,966 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,972 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,978 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,985 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,992 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:23,998 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,004 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,011 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,016 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,023 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,029 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,035 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,042 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,047 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,054 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,063 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,070 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,075 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,081 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,088 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,095 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,101 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,108 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,114 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,121 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,129 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,137 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,144 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,152 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,158 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,164 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,171 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,177 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,184 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,192 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,199 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,206 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,212 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,218 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,225 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,232 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,240 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,246 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,252 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,259 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,264 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,269 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,276 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,282 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,289 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,296 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,303 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,309 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,314 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,320 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,326 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,333 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,341 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,347 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,354 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,360 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,367 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,373 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,380 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,389 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,394 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,402 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,408 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,414 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,422 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,428 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,434 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,441 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,447 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,454 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,460 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,465 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,473 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,478 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,484 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,490 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,496 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,503 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,510 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,516 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,522 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,528 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,533 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,540 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,545 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,551 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,557 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,563 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,568 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,574 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,580 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,586 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,592 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,598 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,603 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,609 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,614 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,620 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,625 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,631 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,637 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,642 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,647 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,653 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,659 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,665 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,673 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,680 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,686 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,693 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,698 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,703 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,710 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,715 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,722 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,728 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,734 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,741 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,747 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,753 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,758 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,763 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,768 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,773 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,779 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,784 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,791 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,797 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,802 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,807 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,812 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,817 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,823 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,828 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,833 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,839 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,844 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,849 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,854 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,860 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,866 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,871 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,878 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,883 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,889 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,894 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,900 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,905 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,910 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,916 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,921 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,926 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,932 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,937 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,942 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,948 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,954 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,959 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,965 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,972 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,977 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,983 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,989 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:24,994 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,000 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,007 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,012 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,018 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,023 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,029 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,034 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,040 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,046 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,053 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,059 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,065 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,070 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,076 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,081 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,088 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,094 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,100 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,106 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,111 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,117 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,123 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,129 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,134 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,139 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,144 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,152 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,158 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,164 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,169 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,174 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,180 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,186 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,191 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,198 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,203 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,209 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,215 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,221 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,227 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,232 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,238 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,243 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,249 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,255 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,262 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,269 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,275 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,280 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,285 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,291 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,296 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,303 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,308 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,313 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,319 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,324 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,330 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,336 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,342 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,347 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,353 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,359 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,365 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,372 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,378 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,384 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,390 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,396 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,402 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,407 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,414 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,420 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,426 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,432 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,438 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,445 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,450 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,456 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,463 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,469 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,475 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,482 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,488 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,494 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,500 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,506 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,511 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,517 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,523 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,529 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,535 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,541 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,547 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,553 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,558 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,564 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,570 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,575 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,581 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,586 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,592 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,598 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,603 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,609 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,615 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,621 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,627 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,633 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,638 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,643 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,649 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,655 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,661 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,667 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,673 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,679 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,685 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,691 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,697 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,702 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,707 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,714 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,720 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,726 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,731 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,737 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,743 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,749 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,755 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,763 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,768 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,775 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,780 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,786 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,792 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,798 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,804 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,810 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,816 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,822 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,828 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,835 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,840 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,846 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,853 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,858 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,865 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,870 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,876 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,881 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,887 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,893 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,898 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,904 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,909 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,915 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,920 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,926 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,932 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,938 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,943 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,949 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,954 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,960 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,966 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,972 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,977 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,982 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,988 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,994 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:25,999 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,006 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,012 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,027 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,039 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,046 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,054 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,060 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,067 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,073 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,079 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,085 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,092 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,099 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,105 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,111 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,117 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,123 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,129 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,135 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,141 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,147 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,153 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,158 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,163 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,169 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,174 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,180 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,187 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,192 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,197 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,203 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,209 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,214 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,220 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,226 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,233 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,239 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,245 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,251 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,256 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,261 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,268 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,273 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,278 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,284 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,289 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,295 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,302 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,308 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,313 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,320 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,325 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,331 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,337 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,343 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,349 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,355 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,360 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,365 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,372 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,379 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,385 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,391 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,398 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,403 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,409 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,415 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,421 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,426 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,432 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,438 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,443 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,448 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,454 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,461 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,467 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,473 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,478 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,484 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,490 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,495 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,501 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,506 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,512 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,517 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,523 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,529 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,535 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,542 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,547 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,552 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,558 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,565 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,569 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,575 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,579 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,585 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,590 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,595 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,601 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,607 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,612 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,617 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,623 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,628 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,634 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,640 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,645 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,650 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,656 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,662 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,668 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,673 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,680 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,685 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,690 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,696 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,702 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,707 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,712 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,718 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,724 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,729 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,735 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,741 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,746 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,752 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,758 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,764 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,769 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,775 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,780 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,787 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,792 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,797 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,802 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,808 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,813 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,819 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,825 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,831 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,836 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,841 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,847 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,852 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,857 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,864 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,870 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,875 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,880 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,886 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,891 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,897 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,902 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,908 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,914 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,919 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,924 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,930 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,935 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,941 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,946 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,953 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,959 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,966 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,972 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,977 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,983 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,989 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:26,995 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,001 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,012 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,018 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,024 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,031 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,037 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,042 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,048 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,054 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,060 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,065 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,071 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,077 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,082 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,088 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,094 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,100 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,106 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,111 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,116 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,122 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,128 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,134 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,139 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,144 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,149 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,154 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,159 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,167 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,174 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,180 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,186 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,191 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,197 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,203 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,209 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,215 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,221 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,226 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,233 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,238 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,244 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,250 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,256 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,261 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,267 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,273 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,281 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,287 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,293 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,299 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,306 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,311 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,318 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,325 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,332 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,339 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,345 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,351 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,357 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,362 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,368 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,373 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,379 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,384 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,390 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,396 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,402 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,409 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,415 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,422 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,428 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,434 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,440 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,446 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,452 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,458 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,465 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,471 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,478 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,485 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,490 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,496 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,503 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,509 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,515 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,521 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,527 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,533 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,538 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,544 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,550 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,555 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,561 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,567 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,574 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,579 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,585 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,591 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,597 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,602 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,608 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,613 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,620 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,626 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,632 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,638 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,644 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,650 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,655 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,661 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,667 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,673 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,679 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,685 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,691 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,697 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,703 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,709 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,715 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,720 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,726 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,732 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,738 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,743 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,749 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,755 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,761 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,767 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,772 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,778 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,784 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,790 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,796 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,801 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,807 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,812 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,817 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,823 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,829 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,835 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,841 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,847 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,852 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,857 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,863 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,868 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,874 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,880 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,886 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,893 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,899 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,904 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,910 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,917 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,922 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,928 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,934 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,940 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,946 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,951 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,957 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,962 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,969 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,976 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,982 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,988 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,993 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:27,999 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,005 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,010 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,015 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,021 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,026 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,032 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,037 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,043 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,049 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,055 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,061 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,066 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,071 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,077 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,084 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,089 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,094 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,100 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,106 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,112 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,117 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,122 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,128 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,135 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,141 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,147 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,152 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,158 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,164 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,170 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,176 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,182 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,188 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,193 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,199 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,205 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,210 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,216 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,221 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,227 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,233 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,238 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,244 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,249 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,255 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,261 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,267 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,273 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,278 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,284 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,289 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,295 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,301 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,307 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,312 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,319 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,324 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,329 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,335 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,340 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,346 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,352 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,357 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,363 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,369 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,375 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,380 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,385 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,390 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,396 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,402 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,407 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,413 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,420 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,425 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,431 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,437 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,442 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,448 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,454 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,460 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,464 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,469 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,475 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,481 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,487 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,495 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,501 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,508 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,514 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,519 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,525 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,531 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,536 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,541 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,547 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,553 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,559 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,565 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,571 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,578 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,583 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,589 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,595 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,600 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,605 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,611 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,617 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,622 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,628 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,634 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,640 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,646 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,651 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,658 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,663 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,669 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,675 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,681 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,687 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,693 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,700 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,707 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,713 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,718 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,725 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,734 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,741 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,748 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,755 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,775 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,783 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,789 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,795 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,801 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,807 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,813 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,819 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,825 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,831 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,837 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,844 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,850 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,856 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,862 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,868 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,874 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,880 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,886 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,892 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,898 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,904 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,910 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,916 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,922 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,928 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,934 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,942 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,948 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,953 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,959 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,966 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,972 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,977 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,983 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,989 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:28,995 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,001 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,008 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,015 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,022 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,028 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,034 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,040 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,045 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,050 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,056 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,061 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,067 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,073 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,079 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,085 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,091 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,097 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,102 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,109 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,115 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,120 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,126 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,132 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,139 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,144 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,151 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,156 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,163 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,168 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,174 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,179 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,185 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,191 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,197 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,203 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,208 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,214 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,219 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,225 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,230 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,236 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,241 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,247 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,252 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,258 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,263 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,269 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,275 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,282 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,288 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,293 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,299 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,304 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,310 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,315 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,320 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,326 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,332 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,338 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,343 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,349 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,356 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,361 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,367 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,373 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,379 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,384 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,390 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,396 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,402 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,408 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,414 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,421 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,428 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,435 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,442 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,448 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,454 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,460 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,466 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,471 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,477 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,482 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,488 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,494 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,499 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,505 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,511 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,516 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,523 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,528 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,534 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,540 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,545 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,551 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,556 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,562 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,567 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,573 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,579 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,586 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,592 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,598 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,604 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,611 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,616 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,621 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,626 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,632 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,637 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,642 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,648 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,654 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,660 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,666 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,674 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,679 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,684 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,691 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,697 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,703 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,709 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,714 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,719 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,725 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,731 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,737 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,742 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,748 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,756 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,761 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,767 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,772 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,777 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,783 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,789 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,795 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,800 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,806 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,812 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,817 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,823 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,829 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,835 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,841 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,848 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,855 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,861 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,867 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,873 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,878 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,884 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,890 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,896 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,902 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,908 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,913 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,919 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,925 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,930 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,936 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,941 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,947 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,953 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,959 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,965 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,970 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,976 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,982 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,987 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,993 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:29,999 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,005 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,011 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,016 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,022 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,028 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,033 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,039 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,047 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,054 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,060 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,066 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,072 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,078 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,084 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,090 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,096 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,102 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,108 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,115 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,121 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,128 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,134 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,140 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,148 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,154 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,160 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,167 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,173 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,179 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,184 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,190 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,195 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,201 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,207 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,213 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,220 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,227 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,234 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,239 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,245 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,250 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,256 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,263 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,269 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,274 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,280 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,286 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,292 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,297 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,302 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,308 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,314 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,320 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,325 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,331 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,337 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,344 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,351 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,358 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,364 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,369 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,375 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,380 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,386 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,392 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,398 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,406 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,412 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,418 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,424 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,431 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,437 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,443 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,449 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,455 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,461 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,468 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,474 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,479 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,485 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,492 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,498 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,504 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,511 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,516 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,522 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,527 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,533 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,538 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,544 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,549 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,555 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,560 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,565 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,571 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,578 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,584 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,590 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,595 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,601 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,606 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,611 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,617 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,622 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,628 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,634 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,640 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,646 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,652 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,657 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,663 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,670 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,676 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,681 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,687 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,693 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,699 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,705 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,710 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,716 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,721 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,727 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,733 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,740 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,746 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,752 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,758 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,764 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,768 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,774 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,780 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,786 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,792 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,797 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,804 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,810 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,816 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,822 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,828 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,834 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,839 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,845 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,850 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,856 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,862 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,868 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,873 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,880 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,886 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,892 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,897 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,903 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,909 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,914 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,920 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,926 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,932 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,937 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,943 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,949 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,955 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,961 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,966 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,972 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,978 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,984 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,990 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:30,996 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,002 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,008 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,015 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,020 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,026 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,032 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,038 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,044 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,050 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,056 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,061 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,067 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,074 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,080 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,085 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,091 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,097 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,103 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,109 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,114 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,120 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,126 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,132 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,138 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,144 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,150 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,156 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,161 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,168 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,174 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,179 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,185 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,192 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,198 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,205 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,213 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,219 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,224 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,230 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,236 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,242 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,248 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,254 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,260 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,265 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,270 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,276 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,282 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,288 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,294 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,300 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,306 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,312 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,318 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,324 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,330 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,336 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,341 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,347 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,353 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,359 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,366 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,372 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,377 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,383 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,389 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,395 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,400 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,406 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,412 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,418 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,424 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,430 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,436 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,441 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,447 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,452 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,458 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,464 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,471 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,476 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,483 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,488 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,494 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,500 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,505 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,511 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,517 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,523 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,529 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,535 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,542 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,548 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,554 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,560 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,565 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,570 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,576 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,583 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,590 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,596 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,602 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,608 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,614 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,619 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,625 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,630 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,636 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,642 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,648 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,655 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,661 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,667 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,687 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,696 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,701 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,707 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,713 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,720 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,725 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,731 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,737 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,743 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,749 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,755 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,760 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,766 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,772 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,779 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,785 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,791 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,797 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,803 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:01:31,809 - py.warnings - WARNING - C:\Users\sgsid\AppData\Local\Temp\ipykernel_27348\415744268.py:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  processed_data[encoded_cols] = encoder.transform(processed_data[cat_cols])

2023-06-13 23:02:25,133 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\envs\kedro-tutorial\lib\site-packages\sklearn\preprocessing\_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.
  warnings.warn(

2023-06-13 23:56:28,206 - kedro.ipython - INFO - Kedro project kedro-tutorial
2023-06-13 23:56:28,210 - kedro.ipython - INFO - Defined global variable 'context', 'session', 'catalog' and 'pipelines'
2023-06-13 23:56:29,341 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\envs\kedro-tutorial\lib\site-packages\strawberry\types\fields\resolver.py:199: DeprecationWarning: Argument name-based matching of 'info' is deprecated and will be removed in v1.0. Ensure that reserved arguments are annotated their respective types (i.e. use value: 'DirectiveValue[str]' instead of 'value: str' and 'info: Info' instead of a plain 'info').
  return {spec: spec.find(parameters, self) for spec in self.RESERVED_PARAMSPEC}

2023-06-13 23:56:30,329 - kedro.ipython - INFO - Registered line magic 'run_viz'
2023-06-13 23:56:30,337 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\envs\kedro-tutorial\lib\site-packages\tornado\ioloop.py:262: DeprecationWarning: There is no current event loop
  loop = asyncio.get_event_loop()

2023-06-14 00:00:55,083 - kedro.ipython - INFO - Kedro project kedro-tutorial
2023-06-14 00:00:55,087 - kedro.ipython - INFO - Defined global variable 'context', 'session', 'catalog' and 'pipelines'
2023-06-14 00:00:55,783 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\envs\kedro-tutorial\lib\site-packages\strawberry\types\fields\resolver.py:199: DeprecationWarning: Argument name-based matching of 'info' is deprecated and will be removed in v1.0. Ensure that reserved arguments are annotated their respective types (i.e. use value: 'DirectiveValue[str]' instead of 'value: str' and 'info: Info' instead of a plain 'info').
  return {spec: spec.find(parameters, self) for spec in self.RESERVED_PARAMSPEC}

2023-06-14 00:00:56,610 - kedro.ipython - INFO - Registered line magic 'run_viz'
2023-06-14 00:00:56,619 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\envs\kedro-tutorial\lib\site-packages\tornado\ioloop.py:262: DeprecationWarning: There is no current event loop
  loop = asyncio.get_event_loop()

2023-06-14 00:01:04,406 - kedro.io.data_catalog - INFO - Loading data from 'cleaned_data' (CSVDataSet)...
2023-06-14 00:05:32,343 - kedro.io.data_catalog - INFO - Loading data from 'cleaned_data' (CSVDataSet)...
2023-06-14 00:24:38,173 - kedro.ipython - INFO - Kedro project kedro-tutorial
2023-06-14 00:24:38,176 - kedro.ipython - INFO - Defined global variable 'context', 'session', 'catalog' and 'pipelines'
2023-06-14 00:24:38,825 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\envs\kedro-tutorial\lib\site-packages\strawberry\types\fields\resolver.py:199: DeprecationWarning: Argument name-based matching of 'info' is deprecated and will be removed in v1.0. Ensure that reserved arguments are annotated their respective types (i.e. use value: 'DirectiveValue[str]' instead of 'value: str' and 'info: Info' instead of a plain 'info').
  return {spec: spec.find(parameters, self) for spec in self.RESERVED_PARAMSPEC}

2023-06-14 00:24:39,604 - kedro.ipython - INFO - Registered line magic 'run_viz'
2023-06-14 00:24:39,612 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\envs\kedro-tutorial\lib\site-packages\tornado\ioloop.py:262: DeprecationWarning: There is no current event loop
  loop = asyncio.get_event_loop()

2023-06-14 00:24:51,980 - kedro.ipython - INFO - Kedro project kedro-tutorial
2023-06-14 00:24:51,983 - kedro.ipython - INFO - Defined global variable 'context', 'session', 'catalog' and 'pipelines'
2023-06-14 00:24:52,597 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\envs\kedro-tutorial\lib\site-packages\strawberry\types\fields\resolver.py:199: DeprecationWarning: Argument name-based matching of 'info' is deprecated and will be removed in v1.0. Ensure that reserved arguments are annotated their respective types (i.e. use value: 'DirectiveValue[str]' instead of 'value: str' and 'info: Info' instead of a plain 'info').
  return {spec: spec.find(parameters, self) for spec in self.RESERVED_PARAMSPEC}

2023-06-14 00:24:53,290 - kedro.ipython - INFO - Registered line magic 'run_viz'
2023-06-14 00:24:53,297 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\envs\kedro-tutorial\lib\site-packages\tornado\ioloop.py:262: DeprecationWarning: There is no current event loop
  loop = asyncio.get_event_loop()

2023-06-14 00:24:54,176 - kedro.io.data_catalog - INFO - Loading data from 'cleaned_data' (CSVDataSet)...
2023-06-14 00:26:10,183 - kedro.ipython - INFO - Kedro project kedro-tutorial
2023-06-14 00:26:10,187 - kedro.ipython - INFO - Defined global variable 'context', 'session', 'catalog' and 'pipelines'
2023-06-14 00:26:10,820 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\envs\kedro-tutorial\lib\site-packages\strawberry\types\fields\resolver.py:199: DeprecationWarning: Argument name-based matching of 'info' is deprecated and will be removed in v1.0. Ensure that reserved arguments are annotated their respective types (i.e. use value: 'DirectiveValue[str]' instead of 'value: str' and 'info: Info' instead of a plain 'info').
  return {spec: spec.find(parameters, self) for spec in self.RESERVED_PARAMSPEC}

2023-06-14 00:26:11,525 - kedro.ipython - INFO - Registered line magic 'run_viz'
2023-06-14 00:26:11,532 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\envs\kedro-tutorial\lib\site-packages\tornado\ioloop.py:262: DeprecationWarning: There is no current event loop
  loop = asyncio.get_event_loop()

2023-06-14 00:26:12,346 - kedro.io.data_catalog - INFO - Loading data from 'cleaned_data' (CSVDataSet)...
2023-06-14 00:27:13,059 - kedro.ipython - INFO - Kedro project kedro-tutorial
2023-06-14 00:27:13,062 - kedro.ipython - INFO - Defined global variable 'context', 'session', 'catalog' and 'pipelines'
2023-06-14 00:27:13,683 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\envs\kedro-tutorial\lib\site-packages\strawberry\types\fields\resolver.py:199: DeprecationWarning: Argument name-based matching of 'info' is deprecated and will be removed in v1.0. Ensure that reserved arguments are annotated their respective types (i.e. use value: 'DirectiveValue[str]' instead of 'value: str' and 'info: Info' instead of a plain 'info').
  return {spec: spec.find(parameters, self) for spec in self.RESERVED_PARAMSPEC}

2023-06-14 00:27:14,391 - kedro.ipython - INFO - Registered line magic 'run_viz'
2023-06-14 00:27:14,399 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\envs\kedro-tutorial\lib\site-packages\tornado\ioloop.py:262: DeprecationWarning: There is no current event loop
  loop = asyncio.get_event_loop()

2023-06-14 00:27:15,273 - kedro.io.data_catalog - INFO - Loading data from 'cleaned_data' (CSVDataSet)...
2023-06-14 00:28:04,377 - kedro.ipython - INFO - Kedro project kedro-tutorial
2023-06-14 00:28:04,381 - kedro.ipython - INFO - Defined global variable 'context', 'session', 'catalog' and 'pipelines'
2023-06-14 00:28:05,005 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\envs\kedro-tutorial\lib\site-packages\strawberry\types\fields\resolver.py:199: DeprecationWarning: Argument name-based matching of 'info' is deprecated and will be removed in v1.0. Ensure that reserved arguments are annotated their respective types (i.e. use value: 'DirectiveValue[str]' instead of 'value: str' and 'info: Info' instead of a plain 'info').
  return {spec: spec.find(parameters, self) for spec in self.RESERVED_PARAMSPEC}

2023-06-14 00:28:05,709 - kedro.ipython - INFO - Registered line magic 'run_viz'
2023-06-14 00:28:05,715 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\envs\kedro-tutorial\lib\site-packages\tornado\ioloop.py:262: DeprecationWarning: There is no current event loop
  loop = asyncio.get_event_loop()

2023-06-14 00:28:06,577 - kedro.io.data_catalog - INFO - Loading data from 'cleaned_data' (CSVDataSet)...
2023-06-14 00:32:41,000 - kedro.ipython - INFO - Kedro project kedro-tutorial
2023-06-14 00:32:41,004 - kedro.ipython - INFO - Defined global variable 'context', 'session', 'catalog' and 'pipelines'
2023-06-14 00:32:41,639 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\envs\kedro-tutorial\lib\site-packages\strawberry\types\fields\resolver.py:199: DeprecationWarning: Argument name-based matching of 'info' is deprecated and will be removed in v1.0. Ensure that reserved arguments are annotated their respective types (i.e. use value: 'DirectiveValue[str]' instead of 'value: str' and 'info: Info' instead of a plain 'info').
  return {spec: spec.find(parameters, self) for spec in self.RESERVED_PARAMSPEC}

2023-06-14 00:32:42,347 - kedro.ipython - INFO - Registered line magic 'run_viz'
2023-06-14 00:32:42,354 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\envs\kedro-tutorial\lib\site-packages\tornado\ioloop.py:262: DeprecationWarning: There is no current event loop
  loop = asyncio.get_event_loop()

2023-06-14 00:33:12,220 - kedro.ipython - INFO - Kedro project kedro-tutorial
2023-06-14 00:33:12,223 - kedro.ipython - INFO - Defined global variable 'context', 'session', 'catalog' and 'pipelines'
2023-06-14 00:33:12,840 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\envs\kedro-tutorial\lib\site-packages\strawberry\types\fields\resolver.py:199: DeprecationWarning: Argument name-based matching of 'info' is deprecated and will be removed in v1.0. Ensure that reserved arguments are annotated their respective types (i.e. use value: 'DirectiveValue[str]' instead of 'value: str' and 'info: Info' instead of a plain 'info').
  return {spec: spec.find(parameters, self) for spec in self.RESERVED_PARAMSPEC}

2023-06-14 00:33:13,546 - kedro.ipython - INFO - Registered line magic 'run_viz'
2023-06-14 00:33:13,554 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\envs\kedro-tutorial\lib\site-packages\tornado\ioloop.py:262: DeprecationWarning: There is no current event loop
  loop = asyncio.get_event_loop()

2023-06-14 00:33:15,859 - kedro.io.data_catalog - INFO - Loading data from 'cleaned_data' (CSVDataSet)...
2023-06-14 01:09:53,128 - kedro.ipython - INFO - Kedro project kedro-tutorial
2023-06-14 01:09:53,133 - kedro.ipython - INFO - Defined global variable 'context', 'session', 'catalog' and 'pipelines'
2023-06-14 01:09:53,855 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\envs\kedro-tutorial\lib\site-packages\strawberry\types\fields\resolver.py:199: DeprecationWarning: Argument name-based matching of 'info' is deprecated and will be removed in v1.0. Ensure that reserved arguments are annotated their respective types (i.e. use value: 'DirectiveValue[str]' instead of 'value: str' and 'info: Info' instead of a plain 'info').
  return {spec: spec.find(parameters, self) for spec in self.RESERVED_PARAMSPEC}

2023-06-14 01:09:54,652 - kedro.ipython - INFO - Registered line magic 'run_viz'
2023-06-14 01:09:54,660 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\envs\kedro-tutorial\lib\site-packages\tornado\ioloop.py:262: DeprecationWarning: There is no current event loop
  loop = asyncio.get_event_loop()

2023-06-14 01:10:27,652 - kedro.io.data_catalog - INFO - Loading data from 'data' (CSVDataSet)...
2023-06-14 17:35:31,432 - kedro.framework.session.session - INFO - Kedro project kedro-tutorial
2023-06-14 17:35:37,184 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\lib\importlib\__init__.py:127: DeprecationWarning: `kedro.extras.datasets` is deprecated and will be removed in Kedro 0.19, install `kedro-datasets` instead by running `pip install kedro-datasets`.
  return _bootstrap._gcd_import(name[level:], package, level)

2023-06-14 17:35:37,728 - kedro.io.data_catalog - INFO - Loading data from 'data' (CSVDataSet)...
2023-06-14 17:35:37,782 - kedro.pipeline.node - INFO - Running node: clean_data_node: clean_data([data]) -> [cleaned_data]
2023-06-14 17:35:37,839 - kedro.io.data_catalog - INFO - Saving data to 'cleaned_data' (CSVDataSet)...
2023-06-14 17:35:37,889 - kedro.runner.sequential_runner - INFO - Completed 1 out of 5 tasks
2023-06-14 17:35:37,890 - kedro.io.data_catalog - INFO - Loading data from 'cleaned_data' (CSVDataSet)...
2023-06-14 17:35:37,929 - kedro.pipeline.node - INFO - Running node: process_data_node: processing([cleaned_data]) -> [model_input_table]
2023-06-14 17:35:37,933 - kedro.pipeline.node - ERROR - Node 'process_data_node: processing([cleaned_data]) -> [model_input_table]' failed with error: 
"['date', 'sqft_above', 'bathrooms'] not found in axis"
2023-06-14 17:35:37,953 - kedro.runner.sequential_runner - WARNING - There are 4 nodes that have not run.
You can resume the pipeline run from the nearest nodes with persisted inputs by adding the following argument to your previous command:
  --from-nodes "process_data_node"
2023-06-14 17:37:16,934 - kedro.framework.session.session - INFO - Kedro project kedro-tutorial
2023-06-14 17:37:17,905 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\lib\importlib\__init__.py:127: DeprecationWarning: `kedro.extras.datasets` is deprecated and will be removed in Kedro 0.19, install `kedro-datasets` instead by running `pip install kedro-datasets`.
  return _bootstrap._gcd_import(name[level:], package, level)

2023-06-14 17:37:18,045 - kedro.io.data_catalog - INFO - Loading data from 'data' (CSVDataSet)...
2023-06-14 17:37:18,113 - kedro.pipeline.node - INFO - Running node: clean_data_node: clean_data([data]) -> [cleaned_data]
2023-06-14 17:37:18,168 - kedro.io.data_catalog - INFO - Saving data to 'cleaned_data' (CSVDataSet)...
2023-06-14 17:37:18,231 - kedro.runner.sequential_runner - INFO - Completed 1 out of 5 tasks
2023-06-14 17:37:18,234 - kedro.io.data_catalog - INFO - Loading data from 'cleaned_data' (CSVDataSet)...
2023-06-14 17:37:18,282 - kedro.pipeline.node - INFO - Running node: process_data_node: processing([cleaned_data]) -> [model_input_table]
2023-06-14 17:37:18,296 - kedro.pipeline.node - ERROR - Node 'process_data_node: processing([cleaned_data]) -> [model_input_table]' failed with error: 
__init__() got an unexpected keyword argument 'sparse_output'
2023-06-14 17:37:18,316 - kedro.runner.sequential_runner - WARNING - There are 4 nodes that have not run.
You can resume the pipeline run from the nearest nodes with persisted inputs by adding the following argument to your previous command:
  --from-nodes "process_data_node"
2023-06-14 17:38:02,008 - kedro.framework.session.session - INFO - Kedro project kedro-tutorial
2023-06-14 17:38:02,873 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\lib\importlib\__init__.py:127: DeprecationWarning: `kedro.extras.datasets` is deprecated and will be removed in Kedro 0.19, install `kedro-datasets` instead by running `pip install kedro-datasets`.
  return _bootstrap._gcd_import(name[level:], package, level)

2023-06-14 17:38:02,996 - kedro.io.data_catalog - INFO - Loading data from 'data' (CSVDataSet)...
2023-06-14 17:38:03,039 - kedro.pipeline.node - INFO - Running node: clean_data_node: clean_data([data]) -> [cleaned_data]
2023-06-14 17:38:03,085 - kedro.io.data_catalog - INFO - Saving data to 'cleaned_data' (CSVDataSet)...
2023-06-14 17:38:03,129 - kedro.runner.sequential_runner - INFO - Completed 1 out of 5 tasks
2023-06-14 17:38:03,131 - kedro.io.data_catalog - INFO - Loading data from 'cleaned_data' (CSVDataSet)...
2023-06-14 17:38:03,174 - kedro.pipeline.node - INFO - Running node: process_data_node: processing([cleaned_data]) -> [model_input_table]
2023-06-14 17:38:03,187 - kedro.pipeline.node - ERROR - Node 'process_data_node: processing([cleaned_data]) -> [model_input_table]' failed with error: 
local variable 'processed_data' referenced before assignment
2023-06-14 17:38:03,205 - kedro.runner.sequential_runner - WARNING - There are 4 nodes that have not run.
You can resume the pipeline run from the nearest nodes with persisted inputs by adding the following argument to your previous command:
  --from-nodes "process_data_node"
2023-06-14 17:38:29,749 - kedro.framework.session.session - INFO - Kedro project kedro-tutorial
2023-06-14 17:38:30,623 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\lib\importlib\__init__.py:127: DeprecationWarning: `kedro.extras.datasets` is deprecated and will be removed in Kedro 0.19, install `kedro-datasets` instead by running `pip install kedro-datasets`.
  return _bootstrap._gcd_import(name[level:], package, level)

2023-06-14 17:38:30,740 - kedro.io.data_catalog - INFO - Loading data from 'data' (CSVDataSet)...
2023-06-14 17:38:30,791 - kedro.pipeline.node - INFO - Running node: clean_data_node: clean_data([data]) -> [cleaned_data]
2023-06-14 17:38:30,838 - kedro.io.data_catalog - INFO - Saving data to 'cleaned_data' (CSVDataSet)...
2023-06-14 17:38:30,887 - kedro.runner.sequential_runner - INFO - Completed 1 out of 5 tasks
2023-06-14 17:38:30,889 - kedro.io.data_catalog - INFO - Loading data from 'cleaned_data' (CSVDataSet)...
2023-06-14 17:38:30,938 - kedro.pipeline.node - INFO - Running node: process_data_node: processing([cleaned_data]) -> [model_input_table]
2023-06-14 17:38:31,558 - kedro.io.data_catalog - INFO - Saving data to 'model_input_table' (CSVDataSet)...
2023-06-14 17:38:42,511 - kedro.runner.sequential_runner - INFO - Completed 2 out of 5 tasks
2023-06-14 17:38:42,514 - kedro.io.data_catalog - INFO - Loading data from 'model_input_table' (CSVDataSet)...
2023-06-14 17:38:45,385 - kedro.io.data_catalog - INFO - Loading data from 'params:model_options' (MemoryDataSet)...
2023-06-14 17:38:45,505 - kedro.pipeline.node - INFO - Running node: split_data_node: split_data([model_input_table,params:model_options]) -> [X_train,X_test,y_train,y_test]
2023-06-14 17:38:46,189 - kedro.io.data_catalog - INFO - Saving data to 'X_train' (MemoryDataSet)...
2023-06-14 17:38:46,486 - kedro.io.data_catalog - INFO - Saving data to 'X_test' (MemoryDataSet)...
2023-06-14 17:38:46,624 - kedro.io.data_catalog - INFO - Saving data to 'y_train' (MemoryDataSet)...
2023-06-14 17:38:46,628 - kedro.io.data_catalog - INFO - Saving data to 'y_test' (MemoryDataSet)...
2023-06-14 17:38:46,657 - kedro.runner.sequential_runner - INFO - Completed 3 out of 5 tasks
2023-06-14 17:38:46,659 - kedro.io.data_catalog - INFO - Loading data from 'X_train' (MemoryDataSet)...
2023-06-14 17:38:46,800 - kedro.io.data_catalog - INFO - Loading data from 'X_test' (MemoryDataSet)...
2023-06-14 17:38:47,149 - kedro.pipeline.node - INFO - Running node: train_model_node: train_model([X_train,X_test]) -> [regressor]
2023-06-14 17:38:47,685 - kedro.pipeline.node - ERROR - Node 'train_model_node: train_model([X_train,X_test]) -> [regressor]' failed with error: 
could not convert string to float: '16020 SE 2nd St'
2023-06-14 17:38:47,967 - kedro.runner.sequential_runner - WARNING - There are 2 nodes that have not run.
You can resume the pipeline run from the nearest nodes with persisted inputs by adding the following argument to your previous command:
  --from-nodes "process_data_node"
2023-06-14 17:43:14,711 - kedro.framework.session.session - INFO - Kedro project kedro-tutorial
2023-06-14 17:43:15,611 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\lib\importlib\__init__.py:127: DeprecationWarning: `kedro.extras.datasets` is deprecated and will be removed in Kedro 0.19, install `kedro-datasets` instead by running `pip install kedro-datasets`.
  return _bootstrap._gcd_import(name[level:], package, level)

2023-06-14 17:43:15,727 - kedro.io.data_catalog - INFO - Loading data from 'data' (CSVDataSet)...
2023-06-14 17:43:15,771 - kedro.pipeline.node - INFO - Running node: clean_data_node: clean_data([data]) -> [cleaned_data]
2023-06-14 17:43:15,817 - kedro.io.data_catalog - INFO - Saving data to 'cleaned_data' (CSVDataSet)...
2023-06-14 17:43:15,863 - kedro.runner.sequential_runner - INFO - Completed 1 out of 5 tasks
2023-06-14 17:43:15,865 - kedro.io.data_catalog - INFO - Loading data from 'cleaned_data' (CSVDataSet)...
2023-06-14 17:43:15,905 - kedro.pipeline.node - INFO - Running node: process_data_node: processing([cleaned_data]) -> [model_input_table]
2023-06-14 17:43:16,367 - kedro.io.data_catalog - INFO - Saving data to 'model_input_table' (CSVDataSet)...
2023-06-14 17:43:27,184 - kedro.runner.sequential_runner - INFO - Completed 2 out of 5 tasks
2023-06-14 17:43:27,186 - kedro.io.data_catalog - INFO - Loading data from 'model_input_table' (CSVDataSet)...
2023-06-14 17:43:29,848 - kedro.io.data_catalog - INFO - Loading data from 'params:model_options' (MemoryDataSet)...
2023-06-14 17:43:29,966 - kedro.pipeline.node - INFO - Running node: split_data_node: split_data([model_input_table,params:model_options]) -> [X_train,X_test,y_train,y_test]
2023-06-14 17:43:30,661 - kedro.io.data_catalog - INFO - Saving data to 'X_train' (MemoryDataSet)...
2023-06-14 17:43:30,909 - kedro.io.data_catalog - INFO - Saving data to 'X_test' (MemoryDataSet)...
2023-06-14 17:43:31,032 - kedro.io.data_catalog - INFO - Saving data to 'y_train' (MemoryDataSet)...
2023-06-14 17:43:31,036 - kedro.io.data_catalog - INFO - Saving data to 'y_test' (MemoryDataSet)...
2023-06-14 17:43:31,061 - kedro.runner.sequential_runner - INFO - Completed 3 out of 5 tasks
2023-06-14 17:43:31,065 - kedro.io.data_catalog - INFO - Loading data from 'X_train' (MemoryDataSet)...
2023-06-14 17:43:31,196 - kedro.io.data_catalog - INFO - Loading data from 'X_test' (MemoryDataSet)...
2023-06-14 17:43:31,539 - kedro.pipeline.node - INFO - Running node: train_model_node: train_model([X_train,X_test]) -> [regressor]
2023-06-14 17:43:31,601 - kedro.pipeline.node - ERROR - Node 'train_model_node: train_model([X_train,X_test]) -> [regressor]' failed with error: 
Found input variables with inconsistent numbers of samples: [3185, 1366]
2023-06-14 17:43:31,832 - kedro.runner.sequential_runner - WARNING - There are 2 nodes that have not run.
You can resume the pipeline run from the nearest nodes with persisted inputs by adding the following argument to your previous command:
  --from-nodes "process_data_node"
2023-06-14 17:46:38,289 - kedro.framework.session.session - INFO - Kedro project kedro-tutorial
2023-06-14 17:46:39,188 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\lib\importlib\__init__.py:127: DeprecationWarning: `kedro.extras.datasets` is deprecated and will be removed in Kedro 0.19, install `kedro-datasets` instead by running `pip install kedro-datasets`.
  return _bootstrap._gcd_import(name[level:], package, level)

2023-06-14 17:46:39,303 - kedro.io.data_catalog - INFO - Loading data from 'data' (CSVDataSet)...
2023-06-14 17:46:39,348 - kedro.pipeline.node - INFO - Running node: clean_data_node: clean_data([data]) -> [cleaned_data]
2023-06-14 17:46:39,396 - kedro.io.data_catalog - INFO - Saving data to 'cleaned_data' (CSVDataSet)...
2023-06-14 17:46:39,439 - kedro.runner.sequential_runner - INFO - Completed 1 out of 5 tasks
2023-06-14 17:46:39,442 - kedro.io.data_catalog - INFO - Loading data from 'cleaned_data' (CSVDataSet)...
2023-06-14 17:46:39,483 - kedro.pipeline.node - INFO - Running node: process_data_node: processing([cleaned_data]) -> [model_input_table]
2023-06-14 17:46:39,941 - kedro.io.data_catalog - INFO - Saving data to 'model_input_table' (CSVDataSet)...
2023-06-14 17:46:50,793 - kedro.runner.sequential_runner - INFO - Completed 2 out of 5 tasks
2023-06-14 17:46:50,796 - kedro.io.data_catalog - INFO - Loading data from 'model_input_table' (CSVDataSet)...
2023-06-14 17:46:53,658 - kedro.io.data_catalog - INFO - Loading data from 'params:model_options' (MemoryDataSet)...
2023-06-14 17:46:53,790 - kedro.pipeline.node - INFO - Running node: split_data_node: split_data([model_input_table,params:model_options]) -> [X_train,X_test,y_train,y_test]
2023-06-14 17:46:54,520 - kedro.io.data_catalog - INFO - Saving data to 'X_train' (MemoryDataSet)...
2023-06-14 17:46:54,761 - kedro.io.data_catalog - INFO - Saving data to 'X_test' (MemoryDataSet)...
2023-06-14 17:46:54,884 - kedro.io.data_catalog - INFO - Saving data to 'y_train' (MemoryDataSet)...
2023-06-14 17:46:54,888 - kedro.io.data_catalog - INFO - Saving data to 'y_test' (MemoryDataSet)...
2023-06-14 17:46:54,912 - kedro.runner.sequential_runner - INFO - Completed 3 out of 5 tasks
2023-06-14 17:46:54,915 - kedro.io.data_catalog - INFO - Loading data from 'X_train' (MemoryDataSet)...
2023-06-14 17:46:55,056 - kedro.io.data_catalog - INFO - Loading data from 'X_test' (MemoryDataSet)...
2023-06-14 17:46:55,412 - kedro.pipeline.node - INFO - Running node: train_model_node: train_model([X_train,X_test]) -> [regressor]
2023-06-14 17:46:55,476 - kedro.pipeline.node - ERROR - Node 'train_model_node: train_model([X_train,X_test]) -> [regressor]' failed with error: 
Found input variables with inconsistent numbers of samples: [3185, 1366]
2023-06-14 17:46:55,706 - kedro.runner.sequential_runner - WARNING - There are 2 nodes that have not run.
You can resume the pipeline run from the nearest nodes with persisted inputs by adding the following argument to your previous command:
  --from-nodes "process_data_node"
2023-06-14 17:49:27,816 - kedro.framework.session.session - INFO - Kedro project kedro-tutorial
2023-06-14 17:49:28,679 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\lib\importlib\__init__.py:127: DeprecationWarning: `kedro.extras.datasets` is deprecated and will be removed in Kedro 0.19, install `kedro-datasets` instead by running `pip install kedro-datasets`.
  return _bootstrap._gcd_import(name[level:], package, level)

2023-06-14 17:49:28,805 - kedro.io.data_catalog - INFO - Loading data from 'data' (CSVDataSet)...
2023-06-14 17:49:28,854 - kedro.pipeline.node - INFO - Running node: clean_data_node: clean_data([data]) -> [cleaned_data]
2023-06-14 17:49:28,906 - kedro.io.data_catalog - INFO - Saving data to 'cleaned_data' (CSVDataSet)...
2023-06-14 17:49:28,951 - kedro.runner.sequential_runner - INFO - Completed 1 out of 5 tasks
2023-06-14 17:49:28,954 - kedro.io.data_catalog - INFO - Loading data from 'cleaned_data' (CSVDataSet)...
2023-06-14 17:49:28,998 - kedro.pipeline.node - INFO - Running node: process_data_node: processing([cleaned_data]) -> [model_input_table]
2023-06-14 17:49:29,460 - kedro.io.data_catalog - INFO - Saving data to 'model_input_table' (CSVDataSet)...
2023-06-14 17:49:40,550 - kedro.runner.sequential_runner - INFO - Completed 2 out of 5 tasks
2023-06-14 17:49:40,553 - kedro.io.data_catalog - INFO - Loading data from 'model_input_table' (CSVDataSet)...
2023-06-14 17:49:43,251 - kedro.io.data_catalog - INFO - Loading data from 'params:model_options' (MemoryDataSet)...
2023-06-14 17:49:43,375 - kedro.pipeline.node - INFO - Running node: split_data_node: split_data([model_input_table,params:model_options]) -> [X_train,X_test,y_train,y_test]
2023-06-14 17:49:44,190 - kedro.io.data_catalog - INFO - Saving data to 'X_train' (MemoryDataSet)...
2023-06-14 17:49:44,478 - kedro.io.data_catalog - INFO - Saving data to 'X_test' (MemoryDataSet)...
2023-06-14 17:49:44,603 - kedro.io.data_catalog - INFO - Saving data to 'y_train' (MemoryDataSet)...
2023-06-14 17:49:44,607 - kedro.io.data_catalog - INFO - Saving data to 'y_test' (MemoryDataSet)...
2023-06-14 17:49:44,637 - kedro.runner.sequential_runner - INFO - Completed 3 out of 5 tasks
2023-06-14 17:49:44,640 - kedro.io.data_catalog - INFO - Loading data from 'X_train' (MemoryDataSet)...
2023-06-14 17:49:44,773 - kedro.io.data_catalog - INFO - Loading data from 'X_test' (MemoryDataSet)...
2023-06-14 17:49:45,128 - kedro.pipeline.node - INFO - Running node: train_model_node: train_model([X_train,X_test]) -> [regressor]
2023-06-14 17:49:45,194 - kedro.pipeline.node - ERROR - Node 'train_model_node: train_model([X_train,X_test]) -> [regressor]' failed with error: 
Found input variables with inconsistent numbers of samples: [3185, 1366]
2023-06-14 17:49:45,426 - kedro.runner.sequential_runner - WARNING - There are 2 nodes that have not run.
You can resume the pipeline run from the nearest nodes with persisted inputs by adding the following argument to your previous command:
  --from-nodes "process_data_node"
2023-06-14 17:52:22,862 - kedro.framework.session.session - INFO - Kedro project kedro-tutorial
2023-06-14 17:52:23,722 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\lib\importlib\__init__.py:127: DeprecationWarning: `kedro.extras.datasets` is deprecated and will be removed in Kedro 0.19, install `kedro-datasets` instead by running `pip install kedro-datasets`.
  return _bootstrap._gcd_import(name[level:], package, level)

2023-06-14 17:52:23,849 - kedro.io.data_catalog - INFO - Loading data from 'data' (CSVDataSet)...
2023-06-14 17:52:23,897 - kedro.pipeline.node - INFO - Running node: clean_data_node: clean_data([data]) -> [cleaned_data]
2023-06-14 17:52:23,950 - kedro.io.data_catalog - INFO - Saving data to 'cleaned_data' (CSVDataSet)...
2023-06-14 17:52:23,997 - kedro.runner.sequential_runner - INFO - Completed 1 out of 5 tasks
2023-06-14 17:52:24,000 - kedro.io.data_catalog - INFO - Loading data from 'cleaned_data' (CSVDataSet)...
2023-06-14 17:52:24,041 - kedro.pipeline.node - INFO - Running node: process_data_node: processing([cleaned_data]) -> [model_input_table]
2023-06-14 17:52:24,499 - kedro.io.data_catalog - INFO - Saving data to 'model_input_table' (CSVDataSet)...
2023-06-14 17:52:35,453 - kedro.runner.sequential_runner - INFO - Completed 2 out of 5 tasks
2023-06-14 17:52:35,455 - kedro.io.data_catalog - INFO - Loading data from 'model_input_table' (CSVDataSet)...
2023-06-14 17:52:38,493 - kedro.io.data_catalog - INFO - Loading data from 'params:model_options' (MemoryDataSet)...
2023-06-14 17:52:38,615 - kedro.pipeline.node - INFO - Running node: split_data_node: split_data([model_input_table,params:model_options]) -> [X_train,X_test,y_train,y_test]
2023-06-14 17:52:39,314 - kedro.io.data_catalog - INFO - Saving data to 'X_train' (MemoryDataSet)...
2023-06-14 17:52:39,557 - kedro.io.data_catalog - INFO - Saving data to 'X_test' (MemoryDataSet)...
2023-06-14 17:52:39,680 - kedro.io.data_catalog - INFO - Saving data to 'y_train' (MemoryDataSet)...
2023-06-14 17:52:39,684 - kedro.io.data_catalog - INFO - Saving data to 'y_test' (MemoryDataSet)...
2023-06-14 17:52:39,711 - kedro.runner.sequential_runner - INFO - Completed 3 out of 5 tasks
2023-06-14 17:52:39,713 - kedro.io.data_catalog - INFO - Loading data from 'X_train' (MemoryDataSet)...
2023-06-14 17:52:39,849 - kedro.io.data_catalog - INFO - Loading data from 'y_train' (MemoryDataSet)...
2023-06-14 17:52:39,967 - kedro.pipeline.node - INFO - Running node: train_model_node: train_model([X_train,y_train]) -> [regressor]
2023-06-14 17:52:50,855 - kedro.io.data_catalog - INFO - Saving data to 'regressor' (PickleDataSet)...
2023-06-14 17:52:50,874 - kedro.runner.sequential_runner - INFO - Completed 4 out of 5 tasks
2023-06-14 17:52:50,883 - kedro.io.data_catalog - INFO - Loading data from 'regressor' (PickleDataSet)...
2023-06-14 17:52:50,886 - kedro.io.data_catalog - INFO - Loading data from 'X_test' (MemoryDataSet)...
2023-06-14 17:52:51,010 - kedro.io.data_catalog - INFO - Loading data from 'y_test' (MemoryDataSet)...
2023-06-14 17:52:51,127 - kedro.pipeline.node - INFO - Running node: evaluate_model_node: evaluate_model([regressor,X_test,y_test]) -> None
2023-06-14 17:52:51,158 - kedro_tutorial.pipelines.data_science.nodes - INFO - Model has RMSE equal to 101164399.290 on test data.
2023-06-14 17:52:51,279 - kedro.runner.sequential_runner - INFO - Completed 5 out of 5 tasks
2023-06-14 17:52:51,281 - kedro.runner.sequential_runner - INFO - Pipeline execution completed successfully.
2023-06-14 20:14:08,760 - kedro.framework.session.session - INFO - Kedro project kedro-tutorial
2023-06-14 20:14:13,353 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\lib\importlib\__init__.py:127: DeprecationWarning: `kedro.extras.datasets` is deprecated and will be removed in Kedro 0.19, install `kedro-datasets` instead by running `pip install kedro-datasets`.
  return _bootstrap._gcd_import(name[level:], package, level)

2023-06-14 20:14:13,802 - kedro.io.data_catalog - INFO - Loading data from 'data' (CSVDataSet)...
2023-06-14 20:14:13,858 - kedro.pipeline.node - INFO - Running node: clean_data_node: clean_data([data]) -> [cleaned_data]
2023-06-14 20:14:13,910 - kedro.io.data_catalog - INFO - Saving data to 'cleaned_data' (CSVDataSet)...
2023-06-14 20:14:13,965 - kedro.runner.sequential_runner - INFO - Completed 1 out of 5 tasks
2023-06-14 20:14:13,966 - kedro.io.data_catalog - INFO - Loading data from 'cleaned_data' (CSVDataSet)...
2023-06-14 20:14:14,019 - kedro.pipeline.node - INFO - Running node: process_data_node: processing([cleaned_data]) -> [model_input_table]
2023-06-14 20:14:14,715 - kedro.io.data_catalog - INFO - Saving data to 'model_input_table' (CSVDataSet)...
2023-06-14 20:14:25,676 - kedro.runner.sequential_runner - INFO - Completed 2 out of 5 tasks
2023-06-14 20:14:25,678 - kedro.io.data_catalog - INFO - Loading data from 'model_input_table' (CSVDataSet)...
2023-06-14 20:14:28,365 - kedro.io.data_catalog - INFO - Loading data from 'params:model_options' (MemoryDataSet)...
2023-06-14 20:14:28,483 - kedro.pipeline.node - INFO - Running node: split_data_node: split_data([model_input_table,params:model_options]) -> [X_train,X_test,y_train,y_test]
2023-06-14 20:14:29,339 - kedro.io.data_catalog - INFO - Saving data to 'X_train' (MemoryDataSet)...
2023-06-14 20:14:29,628 - kedro.io.data_catalog - INFO - Saving data to 'X_test' (MemoryDataSet)...
2023-06-14 20:14:29,796 - kedro.io.data_catalog - INFO - Saving data to 'y_train' (MemoryDataSet)...
2023-06-14 20:14:29,800 - kedro.io.data_catalog - INFO - Saving data to 'y_test' (MemoryDataSet)...
2023-06-14 20:14:29,835 - kedro.runner.sequential_runner - INFO - Completed 3 out of 5 tasks
2023-06-14 20:14:29,837 - kedro.io.data_catalog - INFO - Loading data from 'X_train' (MemoryDataSet)...
2023-06-14 20:14:29,998 - kedro.io.data_catalog - INFO - Loading data from 'y_train' (MemoryDataSet)...
2023-06-14 20:14:30,119 - kedro.pipeline.node - INFO - Running node: train_model_node: train_model([X_train,y_train]) -> [regressor]
2023-06-14 20:14:40,941 - kedro.io.data_catalog - INFO - Saving data to 'regressor' (PickleDataSet)...
2023-06-14 20:14:40,957 - kedro.runner.sequential_runner - INFO - Completed 4 out of 5 tasks
2023-06-14 20:14:40,959 - kedro.io.data_catalog - INFO - Loading data from 'regressor' (PickleDataSet)...
2023-06-14 20:14:40,963 - kedro.io.data_catalog - INFO - Loading data from 'X_test' (MemoryDataSet)...
2023-06-14 20:14:41,088 - kedro.io.data_catalog - INFO - Loading data from 'y_test' (MemoryDataSet)...
2023-06-14 20:14:41,206 - kedro.pipeline.node - INFO - Running node: evaluate_model_node: evaluate_model([regressor,X_test,y_test]) -> None
2023-06-14 20:14:41,235 - kedro_tutorial.pipelines.data_science.nodes - INFO - Model has RMSE equal to 101164399.290 on test data.
2023-06-14 20:14:41,355 - kedro.runner.sequential_runner - INFO - Completed 5 out of 5 tasks
2023-06-14 20:14:41,356 - kedro.runner.sequential_runner - INFO - Pipeline execution completed successfully.
2023-06-14 20:29:13,639 - kedro.framework.session.session - INFO - Kedro project kedro-tutorial
2023-06-14 20:29:14,591 - py.warnings - WARNING - C:\Users\sgsid\anaconda3\lib\importlib\__init__.py:127: DeprecationWarning: `kedro.extras.datasets` is deprecated and will be removed in Kedro 0.19, install `kedro-datasets` instead by running `pip install kedro-datasets`.
  return _bootstrap._gcd_import(name[level:], package, level)

2023-06-14 20:29:14,713 - kedro.io.data_catalog - INFO - Loading data from 'cleaned_data' (CSVDataSet)...
2023-06-14 20:29:14,757 - kedro.pipeline.node - INFO - Running node: process_data_node: processing([cleaned_data]) -> [model_input_table]
2023-06-14 20:29:15,516 - kedro.io.data_catalog - INFO - Saving data to 'model_input_table' (CSVDataSet)...
2023-06-14 20:29:27,258 - kedro.runner.sequential_runner - INFO - Completed 1 out of 4 tasks
2023-06-14 20:29:27,260 - kedro.io.data_catalog - INFO - Loading data from 'model_input_table' (CSVDataSet)...
2023-06-14 20:29:30,548 - kedro.io.data_catalog - INFO - Loading data from 'params:model_options' (MemoryDataSet)...
2023-06-14 20:29:30,687 - kedro.pipeline.node - INFO - Running node: split_data_node: split_data([model_input_table,params:model_options]) -> [X_train,X_test,y_train,y_test]
2023-06-14 20:29:31,458 - kedro.io.data_catalog - INFO - Saving data to 'X_train' (MemoryDataSet)...
2023-06-14 20:29:31,753 - kedro.io.data_catalog - INFO - Saving data to 'X_test' (MemoryDataSet)...
2023-06-14 20:29:31,917 - kedro.io.data_catalog - INFO - Saving data to 'y_train' (MemoryDataSet)...
2023-06-14 20:29:31,920 - kedro.io.data_catalog - INFO - Saving data to 'y_test' (MemoryDataSet)...
2023-06-14 20:29:31,948 - kedro.runner.sequential_runner - INFO - Completed 2 out of 4 tasks
2023-06-14 20:29:31,949 - kedro.io.data_catalog - INFO - Loading data from 'X_train' (MemoryDataSet)...
2023-06-14 20:29:32,085 - kedro.io.data_catalog - INFO - Loading data from 'y_train' (MemoryDataSet)...
2023-06-14 20:29:32,202 - kedro.pipeline.node - INFO - Running node: train_model_node: train_model([X_train,y_train]) -> [regressor]
2023-06-14 20:29:42,983 - kedro.io.data_catalog - INFO - Saving data to 'regressor' (PickleDataSet)...
2023-06-14 20:29:42,998 - kedro.runner.sequential_runner - INFO - Completed 3 out of 4 tasks
2023-06-14 20:29:43,000 - kedro.io.data_catalog - INFO - Loading data from 'regressor' (PickleDataSet)...
2023-06-14 20:29:43,002 - kedro.io.data_catalog - INFO - Loading data from 'X_test' (MemoryDataSet)...
2023-06-14 20:29:43,141 - kedro.io.data_catalog - INFO - Loading data from 'y_test' (MemoryDataSet)...
2023-06-14 20:29:43,257 - kedro.pipeline.node - INFO - Running node: evaluate_model_node: evaluate_model([regressor,X_test,y_test]) -> None
2023-06-14 20:29:43,286 - kedro_tutorial.pipelines.data_science.nodes - INFO - Model has RMSE equal to 101164399.290 on test data.
2023-06-14 20:29:43,407 - kedro.runner.sequential_runner - INFO - Completed 4 out of 4 tasks
2023-06-14 20:29:43,409 - kedro.runner.sequential_runner - INFO - Pipeline execution completed successfully.
